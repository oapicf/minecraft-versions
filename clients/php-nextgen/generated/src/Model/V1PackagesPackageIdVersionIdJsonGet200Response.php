<?php
/**
 * V1PackagesPackageIdVersionIdJsonGet200Response
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * V1PackagesPackageIdVersionIdJsonGet200Response Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class V1PackagesPackageIdVersionIdJsonGet200Response implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_v1_packages__packageId___versionId__json_get_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'version' => 'string',
        'asset_index' => '\OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseAssetIndex',
        'assets' => 'int',
        'compliance_level' => 'int',
        'downloads' => '\OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads',
        'id' => 'string',
        'java_version' => '\OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseJavaVersion',
        'main_class' => 'string',
        'minimum_launcher_version' => 'int',
        'time' => '\DateTime',
        'release_time' => '\DateTime',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'version' => null,
        'asset_index' => null,
        'assets' => null,
        'compliance_level' => null,
        'downloads' => null,
        'id' => null,
        'java_version' => null,
        'main_class' => null,
        'minimum_launcher_version' => null,
        'time' => 'date-time',
        'release_time' => 'date-time',
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'version' => false,
        'asset_index' => false,
        'assets' => false,
        'compliance_level' => false,
        'downloads' => false,
        'id' => false,
        'java_version' => false,
        'main_class' => false,
        'minimum_launcher_version' => false,
        'time' => false,
        'release_time' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'version' => 'version',
        'asset_index' => 'assetIndex',
        'assets' => 'assets',
        'compliance_level' => 'complianceLevel',
        'downloads' => 'downloads',
        'id' => 'id',
        'java_version' => 'javaVersion',
        'main_class' => 'mainClass',
        'minimum_launcher_version' => 'minimumLauncherVersion',
        'time' => 'time',
        'release_time' => 'releaseTime',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'version' => 'setVersion',
        'asset_index' => 'setAssetIndex',
        'assets' => 'setAssets',
        'compliance_level' => 'setComplianceLevel',
        'downloads' => 'setDownloads',
        'id' => 'setId',
        'java_version' => 'setJavaVersion',
        'main_class' => 'setMainClass',
        'minimum_launcher_version' => 'setMinimumLauncherVersion',
        'time' => 'setTime',
        'release_time' => 'setReleaseTime',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'version' => 'getVersion',
        'asset_index' => 'getAssetIndex',
        'assets' => 'getAssets',
        'compliance_level' => 'getComplianceLevel',
        'downloads' => 'getDownloads',
        'id' => 'getId',
        'java_version' => 'getJavaVersion',
        'main_class' => 'getMainClass',
        'minimum_launcher_version' => 'getMinimumLauncherVersion',
        'time' => 'getTime',
        'release_time' => 'getReleaseTime',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('asset_index', $data ?? [], null);
        $this->setIfExists('assets', $data ?? [], null);
        $this->setIfExists('compliance_level', $data ?? [], null);
        $this->setIfExists('downloads', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('java_version', $data ?? [], null);
        $this->setIfExists('main_class', $data ?? [], null);
        $this->setIfExists('minimum_launcher_version', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('release_time', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion(): ?string
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return $this
     */
    public function setVersion(?string $version): static
    {
        if (is_null($version)) {
            throw new InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets asset_index
     *
     * @return \OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseAssetIndex|null
     */
    public function getAssetIndex(): ?\OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseAssetIndex
    {
        return $this->container['asset_index'];
    }

    /**
     * Sets asset_index
     *
     * @param \OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseAssetIndex|null $asset_index asset_index
     *
     * @return $this
     */
    public function setAssetIndex(?\OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseAssetIndex $asset_index): static
    {
        if (is_null($asset_index)) {
            throw new InvalidArgumentException('non-nullable asset_index cannot be null');
        }
        $this->container['asset_index'] = $asset_index;

        return $this;
    }

    /**
     * Gets assets
     *
     * @return int|null
     */
    public function getAssets(): ?int
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param int|null $assets assets
     *
     * @return $this
     */
    public function setAssets(?int $assets): static
    {
        if (is_null($assets)) {
            throw new InvalidArgumentException('non-nullable assets cannot be null');
        }
        $this->container['assets'] = $assets;

        return $this;
    }

    /**
     * Gets compliance_level
     *
     * @return int|null
     */
    public function getComplianceLevel(): ?int
    {
        return $this->container['compliance_level'];
    }

    /**
     * Sets compliance_level
     *
     * @param int|null $compliance_level compliance_level
     *
     * @return $this
     */
    public function setComplianceLevel(?int $compliance_level): static
    {
        if (is_null($compliance_level)) {
            throw new InvalidArgumentException('non-nullable compliance_level cannot be null');
        }
        $this->container['compliance_level'] = $compliance_level;

        return $this;
    }

    /**
     * Gets downloads
     *
     * @return \OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads|null
     */
    public function getDownloads(): ?\OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads
    {
        return $this->container['downloads'];
    }

    /**
     * Sets downloads
     *
     * @param \OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads|null $downloads downloads
     *
     * @return $this
     */
    public function setDownloads(?\OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads $downloads): static
    {
        if (is_null($downloads)) {
            throw new InvalidArgumentException('non-nullable downloads cannot be null');
        }
        $this->container['downloads'] = $downloads;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets java_version
     *
     * @return \OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseJavaVersion|null
     */
    public function getJavaVersion(): ?\OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseJavaVersion
    {
        return $this->container['java_version'];
    }

    /**
     * Sets java_version
     *
     * @param \OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseJavaVersion|null $java_version java_version
     *
     * @return $this
     */
    public function setJavaVersion(?\OpenAPI\Client\Model\V1PackagesPackageIdVersionIdJsonGet200ResponseJavaVersion $java_version): static
    {
        if (is_null($java_version)) {
            throw new InvalidArgumentException('non-nullable java_version cannot be null');
        }
        $this->container['java_version'] = $java_version;

        return $this;
    }

    /**
     * Gets main_class
     *
     * @return string|null
     */
    public function getMainClass(): ?string
    {
        return $this->container['main_class'];
    }

    /**
     * Sets main_class
     *
     * @param string|null $main_class main_class
     *
     * @return $this
     */
    public function setMainClass(?string $main_class): static
    {
        if (is_null($main_class)) {
            throw new InvalidArgumentException('non-nullable main_class cannot be null');
        }
        $this->container['main_class'] = $main_class;

        return $this;
    }

    /**
     * Gets minimum_launcher_version
     *
     * @return int|null
     */
    public function getMinimumLauncherVersion(): ?int
    {
        return $this->container['minimum_launcher_version'];
    }

    /**
     * Sets minimum_launcher_version
     *
     * @param int|null $minimum_launcher_version minimum_launcher_version
     *
     * @return $this
     */
    public function setMinimumLauncherVersion(?int $minimum_launcher_version): static
    {
        if (is_null($minimum_launcher_version)) {
            throw new InvalidArgumentException('non-nullable minimum_launcher_version cannot be null');
        }
        $this->container['minimum_launcher_version'] = $minimum_launcher_version;

        return $this;
    }

    /**
     * Gets time
     *
     * @return \DateTime|null
     */
    public function getTime(): ?\DateTime
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param \DateTime|null $time time
     *
     * @return $this
     */
    public function setTime(?\DateTime $time): static
    {
        if (is_null($time)) {
            throw new InvalidArgumentException('non-nullable time cannot be null');
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets release_time
     *
     * @return \DateTime|null
     */
    public function getReleaseTime(): ?\DateTime
    {
        return $this->container['release_time'];
    }

    /**
     * Sets release_time
     *
     * @param \DateTime|null $release_time release_time
     *
     * @return $this
     */
    public function setReleaseTime(?\DateTime $release_time): static
    {
        if (is_null($release_time)) {
            throw new InvalidArgumentException('non-nullable release_time cannot be null');
        }
        $this->container['release_time'] = $release_time;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


