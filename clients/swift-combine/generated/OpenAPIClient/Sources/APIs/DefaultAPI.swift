//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class DefaultAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://launchermeta.mojang.com")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }


    /// Get Minecraft version manifest
    /// - GET /mc/game/version_manifest.json
    /// - returns: AnyPublisher<VersionManifest, Error> 
    open func getMinecraftVersionManifest() -> AnyPublisher<VersionManifest, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/mc/game/version_manifest.json"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VersionManifest, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VersionManifest.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Get Minecraft version package info
    /// - GET /v1/packages/{packageId}/{versionId}.json
    /// - parameter packageId: (path)  
    /// - parameter versionId: (path)  
    /// - returns: AnyPublisher<VersionPackageInfo, Error> 
    open func getMinecraftVersionPackageInfo(packageId: String, versionId: String) -> AnyPublisher<VersionPackageInfo, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/v1/packages/{packageId}/{versionId}.json"
                path = path.replacingOccurrences(of: "{packageId}", with: packageId)
                path = path.replacingOccurrences(of: "{versionId}", with: versionId)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VersionPackageInfo, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VersionPackageInfo.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
