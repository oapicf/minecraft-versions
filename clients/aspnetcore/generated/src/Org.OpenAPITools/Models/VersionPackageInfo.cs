/*
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.12.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VersionPackageInfo : IEquatable<VersionPackageInfo>
    {
        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets AssetIndex
        /// </summary>
        [DataMember(Name="assetIndex", EmitDefaultValue=false)]
        public VersionPackageInfoAssetIndex AssetIndex { get; set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name="assets", EmitDefaultValue=false)]
        public string Assets { get; set; }

        /// <summary>
        /// Gets or Sets ComplianceLevel
        /// </summary>
        [DataMember(Name="complianceLevel", EmitDefaultValue=true)]
        public int ComplianceLevel { get; set; }

        /// <summary>
        /// Gets or Sets Downloads
        /// </summary>
        [DataMember(Name="downloads", EmitDefaultValue=false)]
        public VersionPackageInfoDownloads Downloads { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets JavaVersion
        /// </summary>
        [DataMember(Name="javaVersion", EmitDefaultValue=false)]
        public VersionPackageInfoJavaVersion JavaVersion { get; set; }

        /// <summary>
        /// Gets or Sets MainClass
        /// </summary>
        /* <example>net.minecraft.client.main.Main</example> */
        [DataMember(Name="mainClass", EmitDefaultValue=false)]
        public string MainClass { get; set; }

        /// <summary>
        /// Gets or Sets MinimumLauncherVersion
        /// </summary>
        /* <example>21</example> */
        [DataMember(Name="minimumLauncherVersion", EmitDefaultValue=true)]
        public int MinimumLauncherVersion { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        /* <example>2024-04-01T11:14:41.000Z</example> */
        [DataMember(Name="time", EmitDefaultValue=true)]
        public DateTime Time { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseTime
        /// </summary>
        /* <example>2024-04-01T11:07:19.000Z</example> */
        [DataMember(Name="releaseTime", EmitDefaultValue=true)]
        public DateTime ReleaseTime { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /* <example>snapshot</example> */
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VersionPackageInfo {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  AssetIndex: ").Append(AssetIndex).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  ComplianceLevel: ").Append(ComplianceLevel).Append("\n");
            sb.Append("  Downloads: ").Append(Downloads).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  JavaVersion: ").Append(JavaVersion).Append("\n");
            sb.Append("  MainClass: ").Append(MainClass).Append("\n");
            sb.Append("  MinimumLauncherVersion: ").Append(MinimumLauncherVersion).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  ReleaseTime: ").Append(ReleaseTime).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VersionPackageInfo)obj);
        }

        /// <summary>
        /// Returns true if VersionPackageInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of VersionPackageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionPackageInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                ) && 
                (
                    AssetIndex == other.AssetIndex ||
                    AssetIndex != null &&
                    AssetIndex.Equals(other.AssetIndex)
                ) && 
                (
                    Assets == other.Assets ||
                    Assets != null &&
                    Assets.Equals(other.Assets)
                ) && 
                (
                    ComplianceLevel == other.ComplianceLevel ||
                    
                    ComplianceLevel.Equals(other.ComplianceLevel)
                ) && 
                (
                    Downloads == other.Downloads ||
                    Downloads != null &&
                    Downloads.Equals(other.Downloads)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    JavaVersion == other.JavaVersion ||
                    JavaVersion != null &&
                    JavaVersion.Equals(other.JavaVersion)
                ) && 
                (
                    MainClass == other.MainClass ||
                    MainClass != null &&
                    MainClass.Equals(other.MainClass)
                ) && 
                (
                    MinimumLauncherVersion == other.MinimumLauncherVersion ||
                    
                    MinimumLauncherVersion.Equals(other.MinimumLauncherVersion)
                ) && 
                (
                    Time == other.Time ||
                    
                    Time.Equals(other.Time)
                ) && 
                (
                    ReleaseTime == other.ReleaseTime ||
                    
                    ReleaseTime.Equals(other.ReleaseTime)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                    if (AssetIndex != null)
                    hashCode = hashCode * 59 + AssetIndex.GetHashCode();
                    if (Assets != null)
                    hashCode = hashCode * 59 + Assets.GetHashCode();
                    
                    hashCode = hashCode * 59 + ComplianceLevel.GetHashCode();
                    if (Downloads != null)
                    hashCode = hashCode * 59 + Downloads.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (JavaVersion != null)
                    hashCode = hashCode * 59 + JavaVersion.GetHashCode();
                    if (MainClass != null)
                    hashCode = hashCode * 59 + MainClass.GetHashCode();
                    
                    hashCode = hashCode * 59 + MinimumLauncherVersion.GetHashCode();
                    
                    hashCode = hashCode * 59 + Time.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReleaseTime.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VersionPackageInfo left, VersionPackageInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VersionPackageInfo left, VersionPackageInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
