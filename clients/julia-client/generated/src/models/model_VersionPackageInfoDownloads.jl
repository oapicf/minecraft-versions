# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VersionPackageInfo_downloads

    VersionPackageInfoDownloads(;
        client=nothing,
        client_mappings=nothing,
        server=nothing,
        server_mappings=nothing,
    )

    - client::Download
    - client_mappings::Download
    - server::Download
    - server_mappings::Download
"""
Base.@kwdef mutable struct VersionPackageInfoDownloads <: OpenAPI.APIModel
    client = nothing # spec type: Union{ Nothing, Download }
    client_mappings = nothing # spec type: Union{ Nothing, Download }
    server = nothing # spec type: Union{ Nothing, Download }
    server_mappings = nothing # spec type: Union{ Nothing, Download }

    function VersionPackageInfoDownloads(client, client_mappings, server, server_mappings, )
        OpenAPI.validate_property(VersionPackageInfoDownloads, Symbol("client"), client)
        OpenAPI.validate_property(VersionPackageInfoDownloads, Symbol("client_mappings"), client_mappings)
        OpenAPI.validate_property(VersionPackageInfoDownloads, Symbol("server"), server)
        OpenAPI.validate_property(VersionPackageInfoDownloads, Symbol("server_mappings"), server_mappings)
        return new(client, client_mappings, server, server_mappings, )
    end
end # type VersionPackageInfoDownloads

const _property_types_VersionPackageInfoDownloads = Dict{Symbol,String}(Symbol("client")=>"Download", Symbol("client_mappings")=>"Download", Symbol("server")=>"Download", Symbol("server_mappings")=>"Download", )
OpenAPI.property_type(::Type{ VersionPackageInfoDownloads }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VersionPackageInfoDownloads[name]))}

function check_required(o::VersionPackageInfoDownloads)
    true
end

function OpenAPI.validate_property(::Type{ VersionPackageInfoDownloads }, name::Symbol, val)




end
