# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Version

    Version(;
        id=nothing,
        type=nothing,
        url=nothing,
        time=nothing,
        releaseTime=nothing,
    )

    - id::String
    - type::String
    - url::String
    - time::ZonedDateTime
    - releaseTime::ZonedDateTime
"""
Base.@kwdef mutable struct Version <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    time::Union{Nothing, ZonedDateTime} = nothing
    releaseTime::Union{Nothing, ZonedDateTime} = nothing

    function Version(id, type, url, time, releaseTime, )
        OpenAPI.validate_property(Version, Symbol("id"), id)
        OpenAPI.validate_property(Version, Symbol("type"), type)
        OpenAPI.validate_property(Version, Symbol("url"), url)
        OpenAPI.validate_property(Version, Symbol("time"), time)
        OpenAPI.validate_property(Version, Symbol("releaseTime"), releaseTime)
        return new(id, type, url, time, releaseTime, )
    end
end # type Version

const _property_types_Version = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"String", Symbol("url")=>"String", Symbol("time")=>"ZonedDateTime", Symbol("releaseTime")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ Version }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Version[name]))}

function check_required(o::Version)
    true
end

function OpenAPI.validate_property(::Type{ Version }, name::Symbol, val)
    if name === Symbol("time")
        OpenAPI.validate_param(name, "Version", :format, val, "date-time")
    end
    if name === Symbol("releaseTime")
        OpenAPI.validate_param(name, "Version", :format, val, "date-time")
    end
end
