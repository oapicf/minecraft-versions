//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**
     Get Minecraft version manifest
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMinecraftVersionManifest(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetMinecraftVersionManifest200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getMinecraftVersionManifestWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Minecraft version manifest
     - GET /mc/game/version_manifest.json
     - returns: RequestBuilder<GetMinecraftVersionManifest200Response> 
     */
    open class func getMinecraftVersionManifestWithRequestBuilder() -> RequestBuilder<GetMinecraftVersionManifest200Response> {
        let localVariablePath = "/mc/game/version_manifest.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMinecraftVersionManifest200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get Minecraft version package details
     
     - parameter packageId: (path)  
     - parameter versionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1PackagesPackageIdVersionIdJsonGet(packageId: String, versionId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: V1PackagesPackageIdVersionIdJsonGet200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return v1PackagesPackageIdVersionIdJsonGetWithRequestBuilder(packageId: packageId, versionId: versionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Minecraft version package details
     - GET /v1/packages/{packageId}/{versionId}.json
     - parameter packageId: (path)  
     - parameter versionId: (path)  
     - returns: RequestBuilder<V1PackagesPackageIdVersionIdJsonGet200Response> 
     */
    open class func v1PackagesPackageIdVersionIdJsonGetWithRequestBuilder(packageId: String, versionId: String) -> RequestBuilder<V1PackagesPackageIdVersionIdJsonGet200Response> {
        var localVariablePath = "/v1/packages/{packageId}/{versionId}.json"
        let packageIdPreEscape = "\(APIHelper.mapValueToPathItem(packageId))"
        let packageIdPostEscape = packageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{packageId}", with: packageIdPostEscape, options: .literal, range: nil)
        let versionIdPreEscape = "\(APIHelper.mapValueToPathItem(versionId))"
        let versionIdPostEscape = versionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{versionId}", with: versionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V1PackagesPackageIdVersionIdJsonGet200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
