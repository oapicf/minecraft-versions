# coding: utf-8

"""
    SDK for Minecraft versions info

    The version of the OpenAPI document: 0.9.0-pre.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from openapi_client.models.v1_packages_package_id_version_id_json_get200_response_downloads_client import V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient

class V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads(BaseModel):
    """
    V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads
    """
    client: Optional[V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient] = None
    client_mappings: Optional[V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient] = None
    server: Optional[V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient] = None
    server_mappings: Optional[V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient] = None
    __properties = ["client", "client_mappings", "server", "server_mappings"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads:
        """Create an instance of V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client_mappings
        if self.client_mappings:
            _dict['client_mappings'] = self.client_mappings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of server
        if self.server:
            _dict['server'] = self.server.to_dict()
        # override the default output from pydantic by calling `to_dict()` of server_mappings
        if self.server_mappings:
            _dict['server_mappings'] = self.server_mappings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads:
        """Create an instance of V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads.parse_obj(obj)

        _obj = V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads.parse_obj({
            "client": V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient.from_dict(obj.get("client")) if obj.get("client") is not None else None,
            "client_mappings": V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient.from_dict(obj.get("client_mappings")) if obj.get("client_mappings") is not None else None,
            "server": V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient.from_dict(obj.get("server")) if obj.get("server") is not None else None,
            "server_mappings": V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient.from_dict(obj.get("server_mappings")) if obj.get("server_mappings") is not None else None
        })
        return _obj


