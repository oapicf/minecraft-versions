/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * _mc_game_version_manifest_get_200_response.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL__mc_game_version_manifest_get_200_response_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL__mc_game_version_manifest_get_200_response_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/_mc_game_version_manifest_get_200_response_latest.h"
#include "CppRestOpenAPIClient/model/_mc_game_version_manifest_get_200_response_versions_inner.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class _mc_game_version_manifest_get_200_response_latest;
class _mc_game_version_manifest_get_200_response_versions_inner;

/// <summary>
/// 
/// </summary>
class  _mc_game_version_manifest_get_200_response
    : public ModelBase
{
public:
    _mc_game_version_manifest_get_200_response();
    virtual ~_mc_game_version_manifest_get_200_response();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// _mc_game_version_manifest_get_200_response members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<_mc_game_version_manifest_get_200_response_latest> getLatest() const;
    bool latestIsSet() const;
    void unsetLatest();

    void setLatest(const std::shared_ptr<_mc_game_version_manifest_get_200_response_latest>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<_mc_game_version_manifest_get_200_response_versions_inner>>& getVersions();
    bool versionsIsSet() const;
    void unsetVersions();

    void setVersions(const std::vector<std::shared_ptr<_mc_game_version_manifest_get_200_response_versions_inner>>& value);


protected:
    std::shared_ptr<_mc_game_version_manifest_get_200_response_latest> m_Latest;
    bool m_LatestIsSet;
    std::vector<std::shared_ptr<_mc_game_version_manifest_get_200_response_versions_inner>> m_Versions;
    bool m_VersionsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL__mc_game_version_manifest_get_200_response_H_ */
