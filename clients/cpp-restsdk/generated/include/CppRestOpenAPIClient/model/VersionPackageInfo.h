/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.12.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * VersionPackageInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_VersionPackageInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_VersionPackageInfo_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/VersionPackageInfo_downloads.h"
#include "CppRestOpenAPIClient/model/VersionPackageInfo_assetIndex.h"
#include "CppRestOpenAPIClient/model/VersionPackageInfo_javaVersion.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class VersionPackageInfo_assetIndex;
class VersionPackageInfo_downloads;
class VersionPackageInfo_javaVersion;


/// <summary>
/// 
/// </summary>
class  VersionPackageInfo
    : public ModelBase
{
public:
    VersionPackageInfo();
    virtual ~VersionPackageInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// VersionPackageInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<VersionPackageInfo_assetIndex> getAssetIndex() const;
    bool assetIndexIsSet() const;
    void unsetAssetIndex();

    void setAssetIndex(const std::shared_ptr<VersionPackageInfo_assetIndex>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAssets() const;
    bool assetsIsSet() const;
    void unsetAssets();

    void setAssets(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getComplianceLevel() const;
    bool complianceLevelIsSet() const;
    void unsetComplianceLevel();

    void setComplianceLevel(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<VersionPackageInfo_downloads> getDownloads() const;
    bool downloadsIsSet() const;
    void unsetDownloads();

    void setDownloads(const std::shared_ptr<VersionPackageInfo_downloads>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<VersionPackageInfo_javaVersion> getJavaVersion() const;
    bool javaVersionIsSet() const;
    void unsetJavaVersion();

    void setJavaVersion(const std::shared_ptr<VersionPackageInfo_javaVersion>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMainClass() const;
    bool mainClassIsSet() const;
    void unsetMainClass();

    void setMainClass(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMinimumLauncherVersion() const;
    bool minimumLauncherVersionIsSet() const;
    void unsetMinimumLauncherVersion();

    void setMinimumLauncherVersion(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getTime() const;
    bool timeIsSet() const;
    void unsetTime();

    void setTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getReleaseTime() const;
    bool releaseTimeIsSet() const;
    void unsetReleaseTime();

    void setReleaseTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);


protected:
    utility::string_t m_Version;
    bool m_VersionIsSet;
    std::shared_ptr<VersionPackageInfo_assetIndex> m_AssetIndex;
    bool m_AssetIndexIsSet;
    utility::string_t m_Assets;
    bool m_AssetsIsSet;
    int32_t m_ComplianceLevel;
    bool m_ComplianceLevelIsSet;
    std::shared_ptr<VersionPackageInfo_downloads> m_Downloads;
    bool m_DownloadsIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    std::shared_ptr<VersionPackageInfo_javaVersion> m_JavaVersion;
    bool m_JavaVersionIsSet;
    utility::string_t m_MainClass;
    bool m_MainClassIsSet;
    int32_t m_MinimumLauncherVersion;
    bool m_MinimumLauncherVersionIsSet;
    utility::datetime m_Time;
    bool m_TimeIsSet;
    utility::datetime m_ReleaseTime;
    bool m_ReleaseTimeIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_VersionPackageInfo_H_ */
