/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.12.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/VersionPackageInfo_downloads.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



VersionPackageInfo_downloads::VersionPackageInfo_downloads()
{
    m_ClientIsSet = false;
    m_Client_mappingsIsSet = false;
    m_ServerIsSet = false;
    m_Server_mappingsIsSet = false;
}

VersionPackageInfo_downloads::~VersionPackageInfo_downloads()
{
}

void VersionPackageInfo_downloads::validate()
{
    // TODO: implement validation
}

web::json::value VersionPackageInfo_downloads::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ClientIsSet)
    {
        val[utility::conversions::to_string_t(U("client"))] = ModelBase::toJson(m_Client);
    }
    if(m_Client_mappingsIsSet)
    {
        val[utility::conversions::to_string_t(U("client_mappings"))] = ModelBase::toJson(m_Client_mappings);
    }
    if(m_ServerIsSet)
    {
        val[utility::conversions::to_string_t(U("server"))] = ModelBase::toJson(m_Server);
    }
    if(m_Server_mappingsIsSet)
    {
        val[utility::conversions::to_string_t(U("server_mappings"))] = ModelBase::toJson(m_Server_mappings);
    }

    return val;
}

bool VersionPackageInfo_downloads::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("client"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Download> refVal_setClient;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClient);
            setClient(refVal_setClient);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("client_mappings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client_mappings")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Download> refVal_setClientMappings;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientMappings);
            setClientMappings(refVal_setClientMappings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("server"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("server")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Download> refVal_setServer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServer);
            setServer(refVal_setServer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("server_mappings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("server_mappings")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Download> refVal_setServerMappings;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServerMappings);
            setServerMappings(refVal_setServerMappings);
        }
    }
    return ok;
}

void VersionPackageInfo_downloads::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ClientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client")), m_Client));
    }
    if(m_Client_mappingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client_mappings")), m_Client_mappings));
    }
    if(m_ServerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("server")), m_Server));
    }
    if(m_Server_mappingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("server_mappings")), m_Server_mappings));
    }
}

bool VersionPackageInfo_downloads::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("client"))))
    {
        std::shared_ptr<Download> refVal_setClient;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client"))), refVal_setClient );
        setClient(refVal_setClient);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("client_mappings"))))
    {
        std::shared_ptr<Download> refVal_setClientMappings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client_mappings"))), refVal_setClientMappings );
        setClientMappings(refVal_setClientMappings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("server"))))
    {
        std::shared_ptr<Download> refVal_setServer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("server"))), refVal_setServer );
        setServer(refVal_setServer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("server_mappings"))))
    {
        std::shared_ptr<Download> refVal_setServerMappings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("server_mappings"))), refVal_setServerMappings );
        setServerMappings(refVal_setServerMappings);
    }
    return ok;
}

std::shared_ptr<Download> VersionPackageInfo_downloads::getClient() const
{
    return m_Client;
}

void VersionPackageInfo_downloads::setClient(const std::shared_ptr<Download>& value)
{
    m_Client = value;
    m_ClientIsSet = true;
}

bool VersionPackageInfo_downloads::clientIsSet() const
{
    return m_ClientIsSet;
}

void VersionPackageInfo_downloads::unsetClient()
{
    m_ClientIsSet = false;
}
std::shared_ptr<Download> VersionPackageInfo_downloads::getClientMappings() const
{
    return m_Client_mappings;
}

void VersionPackageInfo_downloads::setClientMappings(const std::shared_ptr<Download>& value)
{
    m_Client_mappings = value;
    m_Client_mappingsIsSet = true;
}

bool VersionPackageInfo_downloads::clientMappingsIsSet() const
{
    return m_Client_mappingsIsSet;
}

void VersionPackageInfo_downloads::unsetClient_mappings()
{
    m_Client_mappingsIsSet = false;
}
std::shared_ptr<Download> VersionPackageInfo_downloads::getServer() const
{
    return m_Server;
}

void VersionPackageInfo_downloads::setServer(const std::shared_ptr<Download>& value)
{
    m_Server = value;
    m_ServerIsSet = true;
}

bool VersionPackageInfo_downloads::serverIsSet() const
{
    return m_ServerIsSet;
}

void VersionPackageInfo_downloads::unsetServer()
{
    m_ServerIsSet = false;
}
std::shared_ptr<Download> VersionPackageInfo_downloads::getServerMappings() const
{
    return m_Server_mappings;
}

void VersionPackageInfo_downloads::setServerMappings(const std::shared_ptr<Download>& value)
{
    m_Server_mappings = value;
    m_Server_mappingsIsSet = true;
}

bool VersionPackageInfo_downloads::serverMappingsIsSet() const
{
    return m_Server_mappingsIsSet;
}

void VersionPackageInfo_downloads::unsetServer_mappings()
{
    m_Server_mappingsIsSet = false;
}
}
}
}
}


