/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/_mc_game_version_manifest_get_200_response_latest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



_mc_game_version_manifest_get_200_response_latest::_mc_game_version_manifest_get_200_response_latest()
{
    m_Release = utility::conversions::to_string_t("");
    m_ReleaseIsSet = false;
    m_Snapshot = utility::conversions::to_string_t("");
    m_SnapshotIsSet = false;
}

_mc_game_version_manifest_get_200_response_latest::~_mc_game_version_manifest_get_200_response_latest()
{
}

void _mc_game_version_manifest_get_200_response_latest::validate()
{
    // TODO: implement validation
}

web::json::value _mc_game_version_manifest_get_200_response_latest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ReleaseIsSet)
    {
        val[utility::conversions::to_string_t(U("release"))] = ModelBase::toJson(m_Release);
    }
    if(m_SnapshotIsSet)
    {
        val[utility::conversions::to_string_t(U("snapshot"))] = ModelBase::toJson(m_Snapshot);
    }

    return val;
}

bool _mc_game_version_manifest_get_200_response_latest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("release"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("release")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRelease;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRelease);
            setRelease(refVal_setRelease);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("snapshot"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("snapshot")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSnapshot;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSnapshot);
            setSnapshot(refVal_setSnapshot);
        }
    }
    return ok;
}

void _mc_game_version_manifest_get_200_response_latest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ReleaseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("release")), m_Release));
    }
    if(m_SnapshotIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("snapshot")), m_Snapshot));
    }
}

bool _mc_game_version_manifest_get_200_response_latest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("release"))))
    {
        utility::string_t refVal_setRelease;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("release"))), refVal_setRelease );
        setRelease(refVal_setRelease);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("snapshot"))))
    {
        utility::string_t refVal_setSnapshot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("snapshot"))), refVal_setSnapshot );
        setSnapshot(refVal_setSnapshot);
    }
    return ok;
}

utility::string_t _mc_game_version_manifest_get_200_response_latest::getRelease() const
{
    return m_Release;
}

void _mc_game_version_manifest_get_200_response_latest::setRelease(const utility::string_t& value)
{
    m_Release = value;
    m_ReleaseIsSet = true;
}

bool _mc_game_version_manifest_get_200_response_latest::releaseIsSet() const
{
    return m_ReleaseIsSet;
}

void _mc_game_version_manifest_get_200_response_latest::unsetRelease()
{
    m_ReleaseIsSet = false;
}
utility::string_t _mc_game_version_manifest_get_200_response_latest::getSnapshot() const
{
    return m_Snapshot;
}

void _mc_game_version_manifest_get_200_response_latest::setSnapshot(const utility::string_t& value)
{
    m_Snapshot = value;
    m_SnapshotIsSet = true;
}

bool _mc_game_version_manifest_get_200_response_latest::snapshotIsSet() const
{
    return m_SnapshotIsSet;
}

void _mc_game_version_manifest_get_200_response_latest::unsetSnapshot()
{
    m_SnapshotIsSet = false;
}
}
}
}
}


