/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.12.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * VersionPackageInfo_downloads.h
 *
 * 
 */

#ifndef VersionPackageInfo_downloads_H_
#define VersionPackageInfo_downloads_H_



#include "Download.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  VersionPackageInfo_downloads 
{
public:
    VersionPackageInfo_downloads() = default;
    explicit VersionPackageInfo_downloads(boost::property_tree::ptree const& pt);
    virtual ~VersionPackageInfo_downloads() = default;

    VersionPackageInfo_downloads(const VersionPackageInfo_downloads& other) = default; // copy constructor
    VersionPackageInfo_downloads(VersionPackageInfo_downloads&& other) noexcept = default; // move constructor

    VersionPackageInfo_downloads& operator=(const VersionPackageInfo_downloads& other) = default; // copy assignment
    VersionPackageInfo_downloads& operator=(VersionPackageInfo_downloads&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// VersionPackageInfo_downloads members

    /// <summary>
    /// 
    /// </summary>
    Download getClient() const;
    void setClient(Download value);

    /// <summary>
    /// 
    /// </summary>
    Download getClientMappings() const;
    void setClientMappings(Download value);

    /// <summary>
    /// 
    /// </summary>
    Download getServer() const;
    void setServer(Download value);

    /// <summary>
    /// 
    /// </summary>
    Download getServerMappings() const;
    void setServerMappings(Download value);

protected:
    Download m_Client;
    Download m_Client_mappings;
    Download m_Server;
    Download m_Server_mappings;
};

std::vector<VersionPackageInfo_downloads> createVersionPackageInfo_downloadsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<VersionPackageInfo_downloads>(const VersionPackageInfo_downloads& val) {
    return val.toPropertyTree();
}

template<>
inline VersionPackageInfo_downloads fromPt<VersionPackageInfo_downloads>(const boost::property_tree::ptree& pt) {
    VersionPackageInfo_downloads ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* VersionPackageInfo_downloads_H_ */
