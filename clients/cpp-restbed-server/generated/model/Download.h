/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Download.h
 *
 * 
 */

#ifndef Download_H_
#define Download_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Download 
{
public:
    Download() = default;
    explicit Download(boost::property_tree::ptree const& pt);
    virtual ~Download() = default;

    Download(const Download& other) = default; // copy constructor
    Download(Download&& other) noexcept = default; // move constructor

    Download& operator=(const Download& other) = default; // copy assignment
    Download& operator=(Download&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Download members

    /// <summary>
    /// 
    /// </summary>
    std::string getSha1() const;
    void setSha1(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSize() const;
    void setSize(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);

protected:
    std::string m_Sha1 = "";
    int32_t m_Size = 0;
    std::string m_Url = "";
};

std::vector<Download> createDownloadVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Download>(const Download& val) {
    return val.toPropertyTree();
}

template<>
inline Download fromPt<Download>(const boost::property_tree::ptree& pt) {
    Download ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Download_H_ */
