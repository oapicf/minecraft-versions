/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.12.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "VersionPackageInfo_javaVersion.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

VersionPackageInfo_javaVersion::VersionPackageInfo_javaVersion(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string VersionPackageInfo_javaVersion::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void VersionPackageInfo_javaVersion::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree VersionPackageInfo_javaVersion::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("component", m_Component);
	pt.put("majorVersion", m_MajorVersion);
	return pt;
}

void VersionPackageInfo_javaVersion::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Component = pt.get("component", "");
	m_MajorVersion = pt.get("majorVersion", 0);
}

std::string VersionPackageInfo_javaVersion::getComponent() const
{
    return m_Component;
}

void VersionPackageInfo_javaVersion::setComponent(std::string value)
{
    m_Component = value;
}


int32_t VersionPackageInfo_javaVersion::getMajorVersion() const
{
    return m_MajorVersion;
}

void VersionPackageInfo_javaVersion::setMajorVersion(int32_t value)
{
    m_MajorVersion = value;
}



std::vector<VersionPackageInfo_javaVersion> createVersionPackageInfo_javaVersionVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<VersionPackageInfo_javaVersion>();
    for (const auto& child: pt) {
        vec.emplace_back(VersionPackageInfo_javaVersion(child.second));
    }

    return vec;
}

}
}
}
}

