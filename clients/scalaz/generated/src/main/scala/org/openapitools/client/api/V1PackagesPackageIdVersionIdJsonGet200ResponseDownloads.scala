package org.openapitools.client.api

import argonaut._
import argonaut.EncodeJson._
import argonaut.DecodeJson._

import org.http4s.{EntityDecoder, EntityEncoder}
import org.http4s.argonaut._
import org.joda.time.DateTime


import V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads._

case class V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads (
  client: Option[V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient],
clientMappings: Option[V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient],
server: Option[V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient],
serverMappings: Option[V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient])

object V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads {
  import DateTimeCodecs._

  implicit val V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsCodecJson: CodecJson[V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads] = CodecJson.derive[V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads]
  implicit val V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsDecoder: EntityDecoder[V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads] = jsonOf[V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads]
  implicit val V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsEncoder: EntityEncoder[V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads] = jsonEncoderOf[V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads]
}
