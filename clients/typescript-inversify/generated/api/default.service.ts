/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { VersionManifest } from '../model/versionManifest';
import { VersionPackageInfo } from '../model/versionPackageInfo';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class DefaultService {
    private basePath: string = 'https://launchermeta.mojang.com';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Get Minecraft version manifest
     * 
     
     */
    public getMinecraftVersionManifest(observe?: 'body', headers?: Headers): Observable<VersionManifest>;
    public getMinecraftVersionManifest(observe?: 'response', headers?: Headers): Observable<HttpResponse<VersionManifest>>;
    public getMinecraftVersionManifest(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<VersionManifest>> = this.httpClient.get(`${this.basePath}/mc/game/version_manifest.json`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <VersionManifest>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Minecraft version package info
     * 
     * @param packageId 
     * @param versionId 
     
     */
    public getMinecraftVersionPackageInfo(packageId: string, versionId: string, observe?: 'body', headers?: Headers): Observable<VersionPackageInfo>;
    public getMinecraftVersionPackageInfo(packageId: string, versionId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<VersionPackageInfo>>;
    public getMinecraftVersionPackageInfo(packageId: string, versionId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (packageId === null || packageId === undefined){
            throw new Error('Required parameter packageId was null or undefined when calling getMinecraftVersionPackageInfo.');
        }

        if (versionId === null || versionId === undefined){
            throw new Error('Required parameter versionId was null or undefined when calling getMinecraftVersionPackageInfo.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<VersionPackageInfo>> = this.httpClient.get(`${this.basePath}/v1/packages/${encodeURIComponent(String(packageId))}/${encodeURIComponent(String(versionId))}.json`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <VersionPackageInfo>(httpResponse.response))
               );
        }
        return response;
    }

}
