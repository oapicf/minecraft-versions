# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""_mc_game_version_manifest_get_200_response

    McGameVersionManifestGet200Response(;
        latest=nothing,
        versions=nothing,
    )

    - latest::McGameVersionManifestGet200ResponseLatest
    - versions::Vector{McGameVersionManifestGet200ResponseVersionsInner}
"""
Base.@kwdef mutable struct McGameVersionManifestGet200Response <: OpenAPI.APIModel
    latest = nothing # spec type: Union{ Nothing, McGameVersionManifestGet200ResponseLatest }
    versions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{McGameVersionManifestGet200ResponseVersionsInner} }

    function McGameVersionManifestGet200Response(latest, versions, )
        OpenAPI.validate_property(McGameVersionManifestGet200Response, Symbol("latest"), latest)
        OpenAPI.validate_property(McGameVersionManifestGet200Response, Symbol("versions"), versions)
        return new(latest, versions, )
    end
end # type McGameVersionManifestGet200Response

const _property_types_McGameVersionManifestGet200Response = Dict{Symbol,String}(Symbol("latest")=>"McGameVersionManifestGet200ResponseLatest", Symbol("versions")=>"Vector{McGameVersionManifestGet200ResponseVersionsInner}", )
OpenAPI.property_type(::Type{ McGameVersionManifestGet200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_McGameVersionManifestGet200Response[name]))}

function check_required(o::McGameVersionManifestGet200Response)
    true
end

function OpenAPI.validate_property(::Type{ McGameVersionManifestGet200Response }, name::Symbol, val)
end
