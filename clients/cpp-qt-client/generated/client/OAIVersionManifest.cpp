/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersionManifest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersionManifest::OAIVersionManifest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersionManifest::OAIVersionManifest() {
    this->initializeModel();
}

OAIVersionManifest::~OAIVersionManifest() {}

void OAIVersionManifest::initializeModel() {

    m_latest_isSet = false;
    m_latest_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAIVersionManifest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersionManifest::fromJsonObject(QJsonObject json) {

    m_latest_isValid = ::OpenAPI::fromJsonValue(m_latest, json[QString("latest")]);
    m_latest_isSet = !json[QString("latest")].isNull() && m_latest_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;
}

QString OAIVersionManifest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersionManifest::asJsonObject() const {
    QJsonObject obj;
    if (m_latest.isSet()) {
        obj.insert(QString("latest"), ::OpenAPI::toJsonValue(m_latest));
    }
    if (m_versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    return obj;
}

OAIVersionManifest_latest OAIVersionManifest::getLatest() const {
    return m_latest;
}
void OAIVersionManifest::setLatest(const OAIVersionManifest_latest &latest) {
    m_latest = latest;
    m_latest_isSet = true;
}

bool OAIVersionManifest::is_latest_Set() const{
    return m_latest_isSet;
}

bool OAIVersionManifest::is_latest_Valid() const{
    return m_latest_isValid;
}

QList<OAIVersion> OAIVersionManifest::getVersions() const {
    return m_versions;
}
void OAIVersionManifest::setVersions(const QList<OAIVersion> &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIVersionManifest::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIVersionManifest::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAIVersionManifest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_latest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersionManifest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
