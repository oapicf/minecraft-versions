/*
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-06T01:32:12.605708324Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads {
  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient client;

  public static final String SERIALIZED_NAME_CLIENT_MAPPINGS = "client_mappings";
  @SerializedName(SERIALIZED_NAME_CLIENT_MAPPINGS)
  private V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient clientMappings;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient server;

  public static final String SERIALIZED_NAME_SERVER_MAPPINGS = "server_mappings";
  @SerializedName(SERIALIZED_NAME_SERVER_MAPPINGS)
  private V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient serverMappings;

  public V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads() {
  }

  public V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads client(V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient client) {
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @javax.annotation.Nullable
  public V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient getClient() {
    return client;
  }

  public void setClient(V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient client) {
    this.client = client;
  }


  public V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads clientMappings(V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient clientMappings) {
    this.clientMappings = clientMappings;
    return this;
  }

   /**
   * Get clientMappings
   * @return clientMappings
  **/
  @javax.annotation.Nullable
  public V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient getClientMappings() {
    return clientMappings;
  }

  public void setClientMappings(V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient clientMappings) {
    this.clientMappings = clientMappings;
  }


  public V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads server(V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient server) {
    this.server = server;
    return this;
  }

   /**
   * Get server
   * @return server
  **/
  @javax.annotation.Nullable
  public V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient getServer() {
    return server;
  }

  public void setServer(V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient server) {
    this.server = server;
  }


  public V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads serverMappings(V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient serverMappings) {
    this.serverMappings = serverMappings;
    return this;
  }

   /**
   * Get serverMappings
   * @return serverMappings
  **/
  @javax.annotation.Nullable
  public V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient getServerMappings() {
    return serverMappings;
  }

  public void setServerMappings(V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient serverMappings) {
    this.serverMappings = serverMappings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads v1PackagesPackageIdVersionIdJsonGet200ResponseDownloads = (V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads) o;
    return Objects.equals(this.client, v1PackagesPackageIdVersionIdJsonGet200ResponseDownloads.client) &&
        Objects.equals(this.clientMappings, v1PackagesPackageIdVersionIdJsonGet200ResponseDownloads.clientMappings) &&
        Objects.equals(this.server, v1PackagesPackageIdVersionIdJsonGet200ResponseDownloads.server) &&
        Objects.equals(this.serverMappings, v1PackagesPackageIdVersionIdJsonGet200ResponseDownloads.serverMappings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(client, clientMappings, server, serverMappings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads {\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    clientMappings: ").append(toIndentedString(clientMappings)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    serverMappings: ").append(toIndentedString(serverMappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client");
    openapiFields.add("client_mappings");
    openapiFields.add("server");
    openapiFields.add("server_mappings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads is not found in the empty JSON string", V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `client`
      if (jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) {
        V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient.validateJsonElement(jsonObj.get("client"));
      }
      // validate the optional field `client_mappings`
      if (jsonObj.get("client_mappings") != null && !jsonObj.get("client_mappings").isJsonNull()) {
        V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient.validateJsonElement(jsonObj.get("client_mappings"));
      }
      // validate the optional field `server`
      if (jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) {
        V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient.validateJsonElement(jsonObj.get("server"));
      }
      // validate the optional field `server_mappings`
      if (jsonObj.get("server_mappings") != null && !jsonObj.get("server_mappings").isJsonNull()) {
        V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient.validateJsonElement(jsonObj.get("server_mappings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads.class));

       return (TypeAdapter<T>) new TypeAdapter<V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads>() {
           @Override
           public void write(JsonWriter out, V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads
  * @throws IOException if the JSON string is invalid with respect to V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads
  */
  public static V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads.class);
  }

 /**
  * Convert an instance of V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

