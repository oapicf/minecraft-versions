/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "_v1_packages__packageId___versionId__json_get_200_response.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

_v1_packages__packageId___versionId__json_get_200_response::_v1_packages__packageId___versionId__json_get_200_response(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string _v1_packages__packageId___versionId__json_get_200_response::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void _v1_packages__packageId___versionId__json_get_200_response::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree _v1_packages__packageId___versionId__json_get_200_response::toPropertyTree()
{
    return toPropertyTree_internal();
}

void _v1_packages__packageId___versionId__json_get_200_response::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string _v1_packages__packageId___versionId__json_get_200_response::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void _v1_packages__packageId___versionId__json_get_200_response::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree _v1_packages__packageId___versionId__json_get_200_response::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("version", m_Version);
	if (m_AssetIndex != nullptr) {
		pt.add_child("assetIndex", m_AssetIndex->toPropertyTree());
	}
	pt.put("assets", m_Assets);
	pt.put("complianceLevel", m_ComplianceLevel);
	if (m_Downloads != nullptr) {
		pt.add_child("downloads", m_Downloads->toPropertyTree());
	}
	pt.put("id", m_Id);
	if (m_JavaVersion != nullptr) {
		pt.add_child("javaVersion", m_JavaVersion->toPropertyTree());
	}
	pt.put("mainClass", m_MainClass);
	pt.put("minimumLauncherVersion", m_MinimumLauncherVersion);
	pt.put("time", m_Time);
	pt.put("releaseTime", m_ReleaseTime);
	pt.put("type", m_Type);
	return pt;
}

void _v1_packages__packageId___versionId__json_get_200_response::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Version = pt.get("version", "");
	if (pt.get_child_optional("assetIndex")) {
		m_AssetIndex = std::make_shared<_v1_packages__packageId___versionId__json_get_200_response_assetIndex>();
		m_AssetIndex->fromPropertyTree(pt.get_child("assetIndex"));
	}
	m_Assets = pt.get("assets", 0);
	m_ComplianceLevel = pt.get("complianceLevel", 0);
	if (pt.get_child_optional("downloads")) {
		m_Downloads = std::make_shared<_v1_packages__packageId___versionId__json_get_200_response_downloads>();
		m_Downloads->fromPropertyTree(pt.get_child("downloads"));
	}
	m_Id = pt.get("id", "");
	if (pt.get_child_optional("javaVersion")) {
		m_JavaVersion = std::make_shared<_v1_packages__packageId___versionId__json_get_200_response_javaVersion>();
		m_JavaVersion->fromPropertyTree(pt.get_child("javaVersion"));
	}
	m_MainClass = pt.get("mainClass", "");
	m_MinimumLauncherVersion = pt.get("minimumLauncherVersion", 0);
	m_Time = pt.get("time", "");
	m_ReleaseTime = pt.get("releaseTime", "");
	m_Type = pt.get("type", "");
}

std::string _v1_packages__packageId___versionId__json_get_200_response::getVersion() const
{
    return m_Version;
}

void _v1_packages__packageId___versionId__json_get_200_response::setVersion(std::string value)
{
	m_Version = value;
}
std::shared_ptr<_v1_packages__packageId___versionId__json_get_200_response_assetIndex> _v1_packages__packageId___versionId__json_get_200_response::getAssetIndex() const
{
    return m_AssetIndex;
}

void _v1_packages__packageId___versionId__json_get_200_response::setAssetIndex(std::shared_ptr<_v1_packages__packageId___versionId__json_get_200_response_assetIndex> value)
{
	m_AssetIndex = value;
}
int32_t _v1_packages__packageId___versionId__json_get_200_response::getAssets() const
{
    return m_Assets;
}

void _v1_packages__packageId___versionId__json_get_200_response::setAssets(int32_t value)
{
	m_Assets = value;
}
int32_t _v1_packages__packageId___versionId__json_get_200_response::getComplianceLevel() const
{
    return m_ComplianceLevel;
}

void _v1_packages__packageId___versionId__json_get_200_response::setComplianceLevel(int32_t value)
{
	m_ComplianceLevel = value;
}
std::shared_ptr<_v1_packages__packageId___versionId__json_get_200_response_downloads> _v1_packages__packageId___versionId__json_get_200_response::getDownloads() const
{
    return m_Downloads;
}

void _v1_packages__packageId___versionId__json_get_200_response::setDownloads(std::shared_ptr<_v1_packages__packageId___versionId__json_get_200_response_downloads> value)
{
	m_Downloads = value;
}
std::string _v1_packages__packageId___versionId__json_get_200_response::getId() const
{
    return m_Id;
}

void _v1_packages__packageId___versionId__json_get_200_response::setId(std::string value)
{
	m_Id = value;
}
std::shared_ptr<_v1_packages__packageId___versionId__json_get_200_response_javaVersion> _v1_packages__packageId___versionId__json_get_200_response::getJavaVersion() const
{
    return m_JavaVersion;
}

void _v1_packages__packageId___versionId__json_get_200_response::setJavaVersion(std::shared_ptr<_v1_packages__packageId___versionId__json_get_200_response_javaVersion> value)
{
	m_JavaVersion = value;
}
std::string _v1_packages__packageId___versionId__json_get_200_response::getMainClass() const
{
    return m_MainClass;
}

void _v1_packages__packageId___versionId__json_get_200_response::setMainClass(std::string value)
{
	m_MainClass = value;
}
int32_t _v1_packages__packageId___versionId__json_get_200_response::getMinimumLauncherVersion() const
{
    return m_MinimumLauncherVersion;
}

void _v1_packages__packageId___versionId__json_get_200_response::setMinimumLauncherVersion(int32_t value)
{
	m_MinimumLauncherVersion = value;
}
std::string _v1_packages__packageId___versionId__json_get_200_response::getTime() const
{
    return m_Time;
}

void _v1_packages__packageId___versionId__json_get_200_response::setTime(std::string value)
{
	m_Time = value;
}
std::string _v1_packages__packageId___versionId__json_get_200_response::getReleaseTime() const
{
    return m_ReleaseTime;
}

void _v1_packages__packageId___versionId__json_get_200_response::setReleaseTime(std::string value)
{
	m_ReleaseTime = value;
}
std::string _v1_packages__packageId___versionId__json_get_200_response::getType() const
{
    return m_Type;
}

void _v1_packages__packageId___versionId__json_get_200_response::setType(std::string value)
{
	m_Type = value;
}

std::vector<_v1_packages__packageId___versionId__json_get_200_response> create_v1_packages__packageId___versionId__json_get_200_responseVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<_v1_packages__packageId___versionId__json_get_200_response>();
    for (const auto& child: pt) {
        vec.emplace_back(_v1_packages__packageId___versionId__json_get_200_response(child.second));
    }

    return vec;
}

}
}
}
}

