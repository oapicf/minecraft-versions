/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "VersionManifest.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

VersionManifest::VersionManifest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string VersionManifest::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void VersionManifest::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree VersionManifest::toPropertyTree()
{
    return toPropertyTree_internal();
}

void VersionManifest::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string VersionManifest::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void VersionManifest::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree VersionManifest::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	if (m_Latest != nullptr) {
		pt.add_child("latest", m_Latest->toPropertyTree());
	}
	// generate tree for Versions
	if (!m_Versions.empty()) {
		for (const auto &childEntry : m_Versions) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("versions", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void VersionManifest::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("latest")) {
		m_Latest = std::make_shared<VersionManifest_latest>();
		m_Latest->fromPropertyTree(pt.get_child("latest"));
	}
	// push all items of Versions into member vector
	if (pt.get_child_optional("versions")) {
		for (const auto &childTree : pt.get_child("versions")) {
            std::shared_ptr<Version> val =
                std::make_shared<Version>(childTree.second);
            m_Versions.emplace_back(std::move(val));
		}
	}
}

std::shared_ptr<VersionManifest_latest> VersionManifest::getLatest() const
{
    return m_Latest;
}

void VersionManifest::setLatest(std::shared_ptr<VersionManifest_latest> value)
{
	m_Latest = value;
}
std::vector<std::shared_ptr<Version>> VersionManifest::getVersions() const
{
    return m_Versions;
}

void VersionManifest::setVersions(std::vector<std::shared_ptr<Version>> value)
{
	m_Versions = value;
}

std::vector<VersionManifest> createVersionManifestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<VersionManifest>();
    for (const auto& child: pt) {
        vec.emplace_back(VersionManifest(child.second));
    }

    return vec;
}

}
}
}
}

