/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "_v1_packages__packageId___versionId__json_get_200_response_downloads.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

_v1_packages__packageId___versionId__json_get_200_response_downloads::_v1_packages__packageId___versionId__json_get_200_response_downloads(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string _v1_packages__packageId___versionId__json_get_200_response_downloads::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void _v1_packages__packageId___versionId__json_get_200_response_downloads::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree _v1_packages__packageId___versionId__json_get_200_response_downloads::toPropertyTree()
{
    return toPropertyTree_internal();
}

void _v1_packages__packageId___versionId__json_get_200_response_downloads::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string _v1_packages__packageId___versionId__json_get_200_response_downloads::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void _v1_packages__packageId___versionId__json_get_200_response_downloads::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree _v1_packages__packageId___versionId__json_get_200_response_downloads::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	if (m_Client != nullptr) {
		pt.add_child("client", m_Client->toPropertyTree());
	}
	if (m_Client_mappings != nullptr) {
		pt.add_child("client_mappings", m_Client_mappings->toPropertyTree());
	}
	if (m_Server != nullptr) {
		pt.add_child("server", m_Server->toPropertyTree());
	}
	if (m_Server_mappings != nullptr) {
		pt.add_child("server_mappings", m_Server_mappings->toPropertyTree());
	}
	return pt;
}

void _v1_packages__packageId___versionId__json_get_200_response_downloads::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("client")) {
		m_Client = std::make_shared<_v1_packages__packageId___versionId__json_get_200_response_downloads_client>();
		m_Client->fromPropertyTree(pt.get_child("client"));
	}
	if (pt.get_child_optional("client_mappings")) {
		m_Client_mappings = std::make_shared<_v1_packages__packageId___versionId__json_get_200_response_downloads_client>();
		m_Client_mappings->fromPropertyTree(pt.get_child("client_mappings"));
	}
	if (pt.get_child_optional("server")) {
		m_Server = std::make_shared<_v1_packages__packageId___versionId__json_get_200_response_downloads_client>();
		m_Server->fromPropertyTree(pt.get_child("server"));
	}
	if (pt.get_child_optional("server_mappings")) {
		m_Server_mappings = std::make_shared<_v1_packages__packageId___versionId__json_get_200_response_downloads_client>();
		m_Server_mappings->fromPropertyTree(pt.get_child("server_mappings"));
	}
}

std::shared_ptr<_v1_packages__packageId___versionId__json_get_200_response_downloads_client> _v1_packages__packageId___versionId__json_get_200_response_downloads::getClient() const
{
    return m_Client;
}

void _v1_packages__packageId___versionId__json_get_200_response_downloads::setClient(std::shared_ptr<_v1_packages__packageId___versionId__json_get_200_response_downloads_client> value)
{
	m_Client = value;
}
std::shared_ptr<_v1_packages__packageId___versionId__json_get_200_response_downloads_client> _v1_packages__packageId___versionId__json_get_200_response_downloads::getClientMappings() const
{
    return m_Client_mappings;
}

void _v1_packages__packageId___versionId__json_get_200_response_downloads::setClientMappings(std::shared_ptr<_v1_packages__packageId___versionId__json_get_200_response_downloads_client> value)
{
	m_Client_mappings = value;
}
std::shared_ptr<_v1_packages__packageId___versionId__json_get_200_response_downloads_client> _v1_packages__packageId___versionId__json_get_200_response_downloads::getServer() const
{
    return m_Server;
}

void _v1_packages__packageId___versionId__json_get_200_response_downloads::setServer(std::shared_ptr<_v1_packages__packageId___versionId__json_get_200_response_downloads_client> value)
{
	m_Server = value;
}
std::shared_ptr<_v1_packages__packageId___versionId__json_get_200_response_downloads_client> _v1_packages__packageId___versionId__json_get_200_response_downloads::getServerMappings() const
{
    return m_Server_mappings;
}

void _v1_packages__packageId___versionId__json_get_200_response_downloads::setServerMappings(std::shared_ptr<_v1_packages__packageId___versionId__json_get_200_response_downloads_client> value)
{
	m_Server_mappings = value;
}

std::vector<_v1_packages__packageId___versionId__json_get_200_response_downloads> create_v1_packages__packageId___versionId__json_get_200_response_downloadsVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<_v1_packages__packageId___versionId__json_get_200_response_downloads>();
    for (const auto& child: pt) {
        vec.emplace_back(_v1_packages__packageId___versionId__json_get_200_response_downloads(child.second));
    }

    return vec;
}

}
}
}
}

