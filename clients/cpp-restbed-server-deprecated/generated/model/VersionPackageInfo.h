/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * VersionPackageInfo.h
 *
 * 
 */

#ifndef VersionPackageInfo_H_
#define VersionPackageInfo_H_



#include "VersionPackageInfo_javaVersion.h"
#include "VersionPackageInfo_assetIndex.h"
#include <string>
#include "VersionPackageInfo_downloads.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  VersionPackageInfo 
{
public:
    VersionPackageInfo() = default;
    explicit VersionPackageInfo(boost::property_tree::ptree const& pt);
    virtual ~VersionPackageInfo() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// VersionPackageInfo members

    /// <summary>
    /// 
    /// </summary>
    std::string getVersion() const;
    void setVersion(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<VersionPackageInfo_assetIndex> getAssetIndex() const;
    void setAssetIndex(std::shared_ptr<VersionPackageInfo_assetIndex> value);

    /// <summary>
    /// 
    /// </summary>
    std::string getAssets() const;
    void setAssets(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getComplianceLevel() const;
    void setComplianceLevel(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<VersionPackageInfo_downloads> getDownloads() const;
    void setDownloads(std::shared_ptr<VersionPackageInfo_downloads> value);

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<VersionPackageInfo_javaVersion> getJavaVersion() const;
    void setJavaVersion(std::shared_ptr<VersionPackageInfo_javaVersion> value);

    /// <summary>
    /// 
    /// </summary>
    std::string getMainClass() const;
    void setMainClass(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMinimumLauncherVersion() const;
    void setMinimumLauncherVersion(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getTime() const;
    void setTime(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getReleaseTime() const;
    void setReleaseTime(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Version = "";
    std::shared_ptr<VersionPackageInfo_assetIndex> m_AssetIndex;
    std::string m_Assets = "";
    int32_t m_ComplianceLevel = 0;
    std::shared_ptr<VersionPackageInfo_downloads> m_Downloads;
    std::string m_Id = "";
    std::shared_ptr<VersionPackageInfo_javaVersion> m_JavaVersion;
    std::string m_MainClass = "";
    int32_t m_MinimumLauncherVersion = 0;
    std::string m_Time = "";
    std::string m_ReleaseTime = "";
    std::string m_Type = "";
};

std::vector<VersionPackageInfo> createVersionPackageInfoVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* VersionPackageInfo_H_ */
