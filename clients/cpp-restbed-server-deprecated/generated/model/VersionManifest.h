/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * VersionManifest.h
 *
 * 
 */

#ifndef VersionManifest_H_
#define VersionManifest_H_



#include "Version.h"
#include "VersionManifest_latest.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  VersionManifest 
{
public:
    VersionManifest() = default;
    explicit VersionManifest(boost::property_tree::ptree const& pt);
    virtual ~VersionManifest() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// VersionManifest members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<VersionManifest_latest> getLatest() const;
    void setLatest(std::shared_ptr<VersionManifest_latest> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Version>> getVersions() const;
    void setVersions(std::vector<std::shared_ptr<Version>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::shared_ptr<VersionManifest_latest> m_Latest;
    std::vector<std::shared_ptr<Version>> m_Versions;
};

std::vector<VersionManifest> createVersionManifestVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* VersionManifest_H_ */
