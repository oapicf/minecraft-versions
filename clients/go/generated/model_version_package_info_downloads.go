/*
SDK for Minecraft versions info

API version: 0.12.1-pre.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VersionPackageInfoDownloads type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionPackageInfoDownloads{}

// VersionPackageInfoDownloads struct for VersionPackageInfoDownloads
type VersionPackageInfoDownloads struct {
	Client *Download `json:"client,omitempty"`
	ClientMappings *Download `json:"client_mappings,omitempty"`
	Server *Download `json:"server,omitempty"`
	ServerMappings *Download `json:"server_mappings,omitempty"`
}

// NewVersionPackageInfoDownloads instantiates a new VersionPackageInfoDownloads object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionPackageInfoDownloads() *VersionPackageInfoDownloads {
	this := VersionPackageInfoDownloads{}
	return &this
}

// NewVersionPackageInfoDownloadsWithDefaults instantiates a new VersionPackageInfoDownloads object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionPackageInfoDownloadsWithDefaults() *VersionPackageInfoDownloads {
	this := VersionPackageInfoDownloads{}
	return &this
}

// GetClient returns the Client field value if set, zero value otherwise.
func (o *VersionPackageInfoDownloads) GetClient() Download {
	if o == nil || IsNil(o.Client) {
		var ret Download
		return ret
	}
	return *o.Client
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionPackageInfoDownloads) GetClientOk() (*Download, bool) {
	if o == nil || IsNil(o.Client) {
		return nil, false
	}
	return o.Client, true
}

// HasClient returns a boolean if a field has been set.
func (o *VersionPackageInfoDownloads) HasClient() bool {
	if o != nil && !IsNil(o.Client) {
		return true
	}

	return false
}

// SetClient gets a reference to the given Download and assigns it to the Client field.
func (o *VersionPackageInfoDownloads) SetClient(v Download) {
	o.Client = &v
}

// GetClientMappings returns the ClientMappings field value if set, zero value otherwise.
func (o *VersionPackageInfoDownloads) GetClientMappings() Download {
	if o == nil || IsNil(o.ClientMappings) {
		var ret Download
		return ret
	}
	return *o.ClientMappings
}

// GetClientMappingsOk returns a tuple with the ClientMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionPackageInfoDownloads) GetClientMappingsOk() (*Download, bool) {
	if o == nil || IsNil(o.ClientMappings) {
		return nil, false
	}
	return o.ClientMappings, true
}

// HasClientMappings returns a boolean if a field has been set.
func (o *VersionPackageInfoDownloads) HasClientMappings() bool {
	if o != nil && !IsNil(o.ClientMappings) {
		return true
	}

	return false
}

// SetClientMappings gets a reference to the given Download and assigns it to the ClientMappings field.
func (o *VersionPackageInfoDownloads) SetClientMappings(v Download) {
	o.ClientMappings = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *VersionPackageInfoDownloads) GetServer() Download {
	if o == nil || IsNil(o.Server) {
		var ret Download
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionPackageInfoDownloads) GetServerOk() (*Download, bool) {
	if o == nil || IsNil(o.Server) {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *VersionPackageInfoDownloads) HasServer() bool {
	if o != nil && !IsNil(o.Server) {
		return true
	}

	return false
}

// SetServer gets a reference to the given Download and assigns it to the Server field.
func (o *VersionPackageInfoDownloads) SetServer(v Download) {
	o.Server = &v
}

// GetServerMappings returns the ServerMappings field value if set, zero value otherwise.
func (o *VersionPackageInfoDownloads) GetServerMappings() Download {
	if o == nil || IsNil(o.ServerMappings) {
		var ret Download
		return ret
	}
	return *o.ServerMappings
}

// GetServerMappingsOk returns a tuple with the ServerMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionPackageInfoDownloads) GetServerMappingsOk() (*Download, bool) {
	if o == nil || IsNil(o.ServerMappings) {
		return nil, false
	}
	return o.ServerMappings, true
}

// HasServerMappings returns a boolean if a field has been set.
func (o *VersionPackageInfoDownloads) HasServerMappings() bool {
	if o != nil && !IsNil(o.ServerMappings) {
		return true
	}

	return false
}

// SetServerMappings gets a reference to the given Download and assigns it to the ServerMappings field.
func (o *VersionPackageInfoDownloads) SetServerMappings(v Download) {
	o.ServerMappings = &v
}

func (o VersionPackageInfoDownloads) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionPackageInfoDownloads) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Client) {
		toSerialize["client"] = o.Client
	}
	if !IsNil(o.ClientMappings) {
		toSerialize["client_mappings"] = o.ClientMappings
	}
	if !IsNil(o.Server) {
		toSerialize["server"] = o.Server
	}
	if !IsNil(o.ServerMappings) {
		toSerialize["server_mappings"] = o.ServerMappings
	}
	return toSerialize, nil
}

type NullableVersionPackageInfoDownloads struct {
	value *VersionPackageInfoDownloads
	isSet bool
}

func (v NullableVersionPackageInfoDownloads) Get() *VersionPackageInfoDownloads {
	return v.value
}

func (v *NullableVersionPackageInfoDownloads) Set(val *VersionPackageInfoDownloads) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionPackageInfoDownloads) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionPackageInfoDownloads) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionPackageInfoDownloads(val *VersionPackageInfoDownloads) *NullableVersionPackageInfoDownloads {
	return &NullableVersionPackageInfoDownloads{value: val, isSet: true}
}

func (v NullableVersionPackageInfoDownloads) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionPackageInfoDownloads) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


