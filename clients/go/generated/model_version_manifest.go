/*
SDK for Minecraft versions info

API version: 0.9.0-pre.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VersionManifest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionManifest{}

// VersionManifest struct for VersionManifest
type VersionManifest struct {
	Latest *VersionManifestLatest `json:"latest,omitempty"`
	Versions []Version `json:"versions,omitempty"`
}

// NewVersionManifest instantiates a new VersionManifest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionManifest() *VersionManifest {
	this := VersionManifest{}
	return &this
}

// NewVersionManifestWithDefaults instantiates a new VersionManifest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionManifestWithDefaults() *VersionManifest {
	this := VersionManifest{}
	return &this
}

// GetLatest returns the Latest field value if set, zero value otherwise.
func (o *VersionManifest) GetLatest() VersionManifestLatest {
	if o == nil || IsNil(o.Latest) {
		var ret VersionManifestLatest
		return ret
	}
	return *o.Latest
}

// GetLatestOk returns a tuple with the Latest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionManifest) GetLatestOk() (*VersionManifestLatest, bool) {
	if o == nil || IsNil(o.Latest) {
		return nil, false
	}
	return o.Latest, true
}

// HasLatest returns a boolean if a field has been set.
func (o *VersionManifest) HasLatest() bool {
	if o != nil && !IsNil(o.Latest) {
		return true
	}

	return false
}

// SetLatest gets a reference to the given VersionManifestLatest and assigns it to the Latest field.
func (o *VersionManifest) SetLatest(v VersionManifestLatest) {
	o.Latest = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *VersionManifest) GetVersions() []Version {
	if o == nil || IsNil(o.Versions) {
		var ret []Version
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionManifest) GetVersionsOk() ([]Version, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *VersionManifest) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []Version and assigns it to the Versions field.
func (o *VersionManifest) SetVersions(v []Version) {
	o.Versions = v
}

func (o VersionManifest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionManifest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Latest) {
		toSerialize["latest"] = o.Latest
	}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

type NullableVersionManifest struct {
	value *VersionManifest
	isSet bool
}

func (v NullableVersionManifest) Get() *VersionManifest {
	return v.value
}

func (v *NullableVersionManifest) Set(val *VersionManifest) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionManifest) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionManifest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionManifest(val *VersionManifest) *NullableVersionManifest {
	return &NullableVersionManifest{value: val, isSet: true}
}

func (v NullableVersionManifest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionManifest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


