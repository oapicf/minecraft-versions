/*
SDK for Minecraft versions info

API version: 1.1.1-pre.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VersionPackageInfoJavaVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionPackageInfoJavaVersion{}

// VersionPackageInfoJavaVersion struct for VersionPackageInfoJavaVersion
type VersionPackageInfoJavaVersion struct {
	Component *string `json:"component,omitempty"`
	MajorVersion *int32 `json:"majorVersion,omitempty"`
}

// NewVersionPackageInfoJavaVersion instantiates a new VersionPackageInfoJavaVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionPackageInfoJavaVersion() *VersionPackageInfoJavaVersion {
	this := VersionPackageInfoJavaVersion{}
	return &this
}

// NewVersionPackageInfoJavaVersionWithDefaults instantiates a new VersionPackageInfoJavaVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionPackageInfoJavaVersionWithDefaults() *VersionPackageInfoJavaVersion {
	this := VersionPackageInfoJavaVersion{}
	return &this
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *VersionPackageInfoJavaVersion) GetComponent() string {
	if o == nil || IsNil(o.Component) {
		var ret string
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionPackageInfoJavaVersion) GetComponentOk() (*string, bool) {
	if o == nil || IsNil(o.Component) {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *VersionPackageInfoJavaVersion) HasComponent() bool {
	if o != nil && !IsNil(o.Component) {
		return true
	}

	return false
}

// SetComponent gets a reference to the given string and assigns it to the Component field.
func (o *VersionPackageInfoJavaVersion) SetComponent(v string) {
	o.Component = &v
}

// GetMajorVersion returns the MajorVersion field value if set, zero value otherwise.
func (o *VersionPackageInfoJavaVersion) GetMajorVersion() int32 {
	if o == nil || IsNil(o.MajorVersion) {
		var ret int32
		return ret
	}
	return *o.MajorVersion
}

// GetMajorVersionOk returns a tuple with the MajorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionPackageInfoJavaVersion) GetMajorVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.MajorVersion) {
		return nil, false
	}
	return o.MajorVersion, true
}

// HasMajorVersion returns a boolean if a field has been set.
func (o *VersionPackageInfoJavaVersion) HasMajorVersion() bool {
	if o != nil && !IsNil(o.MajorVersion) {
		return true
	}

	return false
}

// SetMajorVersion gets a reference to the given int32 and assigns it to the MajorVersion field.
func (o *VersionPackageInfoJavaVersion) SetMajorVersion(v int32) {
	o.MajorVersion = &v
}

func (o VersionPackageInfoJavaVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionPackageInfoJavaVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Component) {
		toSerialize["component"] = o.Component
	}
	if !IsNil(o.MajorVersion) {
		toSerialize["majorVersion"] = o.MajorVersion
	}
	return toSerialize, nil
}

type NullableVersionPackageInfoJavaVersion struct {
	value *VersionPackageInfoJavaVersion
	isSet bool
}

func (v NullableVersionPackageInfoJavaVersion) Get() *VersionPackageInfoJavaVersion {
	return v.value
}

func (v *NullableVersionPackageInfoJavaVersion) Set(val *VersionPackageInfoJavaVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionPackageInfoJavaVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionPackageInfoJavaVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionPackageInfoJavaVersion(val *VersionPackageInfoJavaVersion) *NullableVersionPackageInfoJavaVersion {
	return &NullableVersionPackageInfoJavaVersion{value: val, isSet: true}
}

func (v NullableVersionPackageInfoJavaVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionPackageInfoJavaVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


