/*
SDK for Minecraft versions info

API version: 0.9.0-pre.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VersionManifestLatest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionManifestLatest{}

// VersionManifestLatest struct for VersionManifestLatest
type VersionManifestLatest struct {
	Release *string `json:"release,omitempty"`
	Snapshot *string `json:"snapshot,omitempty"`
}

// NewVersionManifestLatest instantiates a new VersionManifestLatest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionManifestLatest() *VersionManifestLatest {
	this := VersionManifestLatest{}
	return &this
}

// NewVersionManifestLatestWithDefaults instantiates a new VersionManifestLatest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionManifestLatestWithDefaults() *VersionManifestLatest {
	this := VersionManifestLatest{}
	return &this
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *VersionManifestLatest) GetRelease() string {
	if o == nil || IsNil(o.Release) {
		var ret string
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionManifestLatest) GetReleaseOk() (*string, bool) {
	if o == nil || IsNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *VersionManifestLatest) HasRelease() bool {
	if o != nil && !IsNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given string and assigns it to the Release field.
func (o *VersionManifestLatest) SetRelease(v string) {
	o.Release = &v
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *VersionManifestLatest) GetSnapshot() string {
	if o == nil || IsNil(o.Snapshot) {
		var ret string
		return ret
	}
	return *o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionManifestLatest) GetSnapshotOk() (*string, bool) {
	if o == nil || IsNil(o.Snapshot) {
		return nil, false
	}
	return o.Snapshot, true
}

// HasSnapshot returns a boolean if a field has been set.
func (o *VersionManifestLatest) HasSnapshot() bool {
	if o != nil && !IsNil(o.Snapshot) {
		return true
	}

	return false
}

// SetSnapshot gets a reference to the given string and assigns it to the Snapshot field.
func (o *VersionManifestLatest) SetSnapshot(v string) {
	o.Snapshot = &v
}

func (o VersionManifestLatest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionManifestLatest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	if !IsNil(o.Snapshot) {
		toSerialize["snapshot"] = o.Snapshot
	}
	return toSerialize, nil
}

type NullableVersionManifestLatest struct {
	value *VersionManifestLatest
	isSet bool
}

func (v NullableVersionManifestLatest) Get() *VersionManifestLatest {
	return v.value
}

func (v *NullableVersionManifestLatest) Set(val *VersionManifestLatest) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionManifestLatest) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionManifestLatest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionManifestLatest(val *VersionManifestLatest) *NullableVersionManifestLatest {
	return &NullableVersionManifestLatest{value: val, isSet: true}
}

func (v NullableVersionManifestLatest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionManifestLatest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


