/*
SDK for Minecraft versions info

API version: 0.9.0-pre.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the McGameVersionManifestGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &McGameVersionManifestGet200Response{}

// McGameVersionManifestGet200Response struct for McGameVersionManifestGet200Response
type McGameVersionManifestGet200Response struct {
	Latest *McGameVersionManifestGet200ResponseLatest `json:"latest,omitempty"`
	Versions []McGameVersionManifestGet200ResponseVersionsInner `json:"versions,omitempty"`
}

// NewMcGameVersionManifestGet200Response instantiates a new McGameVersionManifestGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcGameVersionManifestGet200Response() *McGameVersionManifestGet200Response {
	this := McGameVersionManifestGet200Response{}
	return &this
}

// NewMcGameVersionManifestGet200ResponseWithDefaults instantiates a new McGameVersionManifestGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcGameVersionManifestGet200ResponseWithDefaults() *McGameVersionManifestGet200Response {
	this := McGameVersionManifestGet200Response{}
	return &this
}

// GetLatest returns the Latest field value if set, zero value otherwise.
func (o *McGameVersionManifestGet200Response) GetLatest() McGameVersionManifestGet200ResponseLatest {
	if o == nil || IsNil(o.Latest) {
		var ret McGameVersionManifestGet200ResponseLatest
		return ret
	}
	return *o.Latest
}

// GetLatestOk returns a tuple with the Latest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McGameVersionManifestGet200Response) GetLatestOk() (*McGameVersionManifestGet200ResponseLatest, bool) {
	if o == nil || IsNil(o.Latest) {
		return nil, false
	}
	return o.Latest, true
}

// HasLatest returns a boolean if a field has been set.
func (o *McGameVersionManifestGet200Response) HasLatest() bool {
	if o != nil && !IsNil(o.Latest) {
		return true
	}

	return false
}

// SetLatest gets a reference to the given McGameVersionManifestGet200ResponseLatest and assigns it to the Latest field.
func (o *McGameVersionManifestGet200Response) SetLatest(v McGameVersionManifestGet200ResponseLatest) {
	o.Latest = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *McGameVersionManifestGet200Response) GetVersions() []McGameVersionManifestGet200ResponseVersionsInner {
	if o == nil || IsNil(o.Versions) {
		var ret []McGameVersionManifestGet200ResponseVersionsInner
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McGameVersionManifestGet200Response) GetVersionsOk() ([]McGameVersionManifestGet200ResponseVersionsInner, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *McGameVersionManifestGet200Response) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []McGameVersionManifestGet200ResponseVersionsInner and assigns it to the Versions field.
func (o *McGameVersionManifestGet200Response) SetVersions(v []McGameVersionManifestGet200ResponseVersionsInner) {
	o.Versions = v
}

func (o McGameVersionManifestGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o McGameVersionManifestGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Latest) {
		toSerialize["latest"] = o.Latest
	}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

type NullableMcGameVersionManifestGet200Response struct {
	value *McGameVersionManifestGet200Response
	isSet bool
}

func (v NullableMcGameVersionManifestGet200Response) Get() *McGameVersionManifestGet200Response {
	return v.value
}

func (v *NullableMcGameVersionManifestGet200Response) Set(val *McGameVersionManifestGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableMcGameVersionManifestGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableMcGameVersionManifestGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcGameVersionManifestGet200Response(val *McGameVersionManifestGet200Response) *NullableMcGameVersionManifestGet200Response {
	return &NullableMcGameVersionManifestGet200Response{value: val, isSet: true}
}

func (v NullableMcGameVersionManifestGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcGameVersionManifestGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


