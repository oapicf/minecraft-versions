// tslint:disable
/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    McGameVersionManifestGet200Response,
    McGameVersionManifestGet200ResponseFromJSON,
    McGameVersionManifestGet200ResponseToJSON,
    V1PackagesPackageIdVersionIdJsonGet200Response,
    V1PackagesPackageIdVersionIdJsonGet200ResponseFromJSON,
    V1PackagesPackageIdVersionIdJsonGet200ResponseToJSON,
} from '../models';

export interface V1PackagesPackageIdVersionIdJsonGetRequest {
    packageId: string;
    versionId: string;
}


/**
 * Get Minecraft version manifest
 */
function mcGameVersionManifestGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, McGameVersionManifestGet200Response> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mc/game/version_manifest`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(McGameVersionManifestGet200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get Minecraft version manifest
*/
export function mcGameVersionManifestGet<T>( requestConfig?: runtime.TypedQueryConfig<T, McGameVersionManifestGet200Response>): QueryConfig<T> {
    return mcGameVersionManifestGetRaw( requestConfig);
}

/**
 * Get Minecraft version package details
 */
function v1PackagesPackageIdVersionIdJsonGetRaw<T>(requestParameters: V1PackagesPackageIdVersionIdJsonGetRequest, requestConfig: runtime.TypedQueryConfig<T, V1PackagesPackageIdVersionIdJsonGet200Response> = {}): QueryConfig<T> {
    if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
        throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling v1PackagesPackageIdVersionIdJsonGet.');
    }

    if (requestParameters.versionId === null || requestParameters.versionId === undefined) {
        throw new runtime.RequiredError('versionId','Required parameter requestParameters.versionId was null or undefined when calling v1PackagesPackageIdVersionIdJsonGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/v1/packages/{packageId}/{versionId}.json`.replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))).replace(`{${"versionId"}}`, encodeURIComponent(String(requestParameters.versionId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(V1PackagesPackageIdVersionIdJsonGet200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get Minecraft version package details
*/
export function v1PackagesPackageIdVersionIdJsonGet<T>(requestParameters: V1PackagesPackageIdVersionIdJsonGetRequest, requestConfig?: runtime.TypedQueryConfig<T, V1PackagesPackageIdVersionIdJsonGet200Response>): QueryConfig<T> {
    return v1PackagesPackageIdVersionIdJsonGetRaw(requestParameters, requestConfig);
}

