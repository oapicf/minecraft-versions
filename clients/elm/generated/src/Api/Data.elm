{-
   
   SDK for Minecraft versions info

   The version of the OpenAPI document: 0.9.0-pre.0
   Contact: blah+oapicf@cliffano.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( Download
    , Version
    , VersionManifest
    , VersionManifestLatest
    , VersionPackageInfo
    , VersionPackageInfoAssetIndex
    , VersionPackageInfoDownloads
    , VersionPackageInfoJavaVersion
    , encodeDownload
    , encodeVersion
    , encodeVersionManifest
    , encodeVersionManifestLatest
    , encodeVersionPackageInfo
    , encodeVersionPackageInfoAssetIndex
    , encodeVersionPackageInfoDownloads
    , encodeVersionPackageInfoJavaVersion
    , downloadDecoder
    , versionDecoder
    , versionManifestDecoder
    , versionManifestLatestDecoder
    , versionPackageInfoDecoder
    , versionPackageInfoAssetIndexDecoder
    , versionPackageInfoDownloadsDecoder
    , versionPackageInfoJavaVersionDecoder
    )

import Api
import Api.Time exposing (Posix)
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias Download =
    { sha1 : Maybe String
    , size : Maybe Int
    , url : Maybe String
    }


type alias Version =
    { id : Maybe String
    , type_ : Maybe String
    , url : Maybe String
    , time : Maybe Posix
    , releaseTime : Maybe Posix
    }


type alias VersionManifest =
    { latest : Maybe VersionManifestLatest
    , versions : Maybe ( List Version )
    }


type alias VersionManifestLatest =
    { release : Maybe String
    , snapshot : Maybe String
    }


type alias VersionPackageInfo =
    { version : Maybe String
    , assetIndex : Maybe VersionPackageInfoAssetIndex
    , assets : Maybe Int
    , complianceLevel : Maybe Int
    , downloads : Maybe VersionPackageInfoDownloads
    , id : Maybe String
    , javaVersion : Maybe VersionPackageInfoJavaVersion
    , mainClass : Maybe String
    , minimumLauncherVersion : Maybe Int
    , time : Maybe Posix
    , releaseTime : Maybe Posix
    , type_ : Maybe String
    }


type alias VersionPackageInfoAssetIndex =
    { id : Maybe String
    , sha1 : Maybe String
    , size : Maybe Int
    , totalSize : Maybe Int
    , url : Maybe String
    }


type alias VersionPackageInfoDownloads =
    { client : Maybe Download
    , clientMappings : Maybe Download
    , server : Maybe Download
    , serverMappings : Maybe Download
    }


type alias VersionPackageInfoJavaVersion =
    { component : Maybe String
    , majorVersion : Maybe Int
    }


-- ENCODER


encodeDownload : Download -> Json.Encode.Value
encodeDownload =
    encodeObject << encodeDownloadPairs


encodeDownloadWithTag : ( String, String ) -> Download -> Json.Encode.Value
encodeDownloadWithTag (tagField, tag) model =
    encodeObject (encodeDownloadPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDownloadPairs : Download -> List EncodedField
encodeDownloadPairs model =
    let
        pairs =
            [ maybeEncode "sha1" Json.Encode.string model.sha1
            , maybeEncode "size" Json.Encode.int model.size
            , maybeEncode "url" Json.Encode.string model.url
            ]
    in
    pairs


encodeVersion : Version -> Json.Encode.Value
encodeVersion =
    encodeObject << encodeVersionPairs


encodeVersionWithTag : ( String, String ) -> Version -> Json.Encode.Value
encodeVersionWithTag (tagField, tag) model =
    encodeObject (encodeVersionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeVersionPairs : Version -> List EncodedField
encodeVersionPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "type" Json.Encode.string model.type_
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "time" Api.Time.encodeDateTime model.time
            , maybeEncode "releaseTime" Api.Time.encodeDateTime model.releaseTime
            ]
    in
    pairs


encodeVersionManifest : VersionManifest -> Json.Encode.Value
encodeVersionManifest =
    encodeObject << encodeVersionManifestPairs


encodeVersionManifestWithTag : ( String, String ) -> VersionManifest -> Json.Encode.Value
encodeVersionManifestWithTag (tagField, tag) model =
    encodeObject (encodeVersionManifestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeVersionManifestPairs : VersionManifest -> List EncodedField
encodeVersionManifestPairs model =
    let
        pairs =
            [ maybeEncode "latest" encodeVersionManifestLatest model.latest
            , maybeEncode "versions" (Json.Encode.list encodeVersion) model.versions
            ]
    in
    pairs


encodeVersionManifestLatest : VersionManifestLatest -> Json.Encode.Value
encodeVersionManifestLatest =
    encodeObject << encodeVersionManifestLatestPairs


encodeVersionManifestLatestWithTag : ( String, String ) -> VersionManifestLatest -> Json.Encode.Value
encodeVersionManifestLatestWithTag (tagField, tag) model =
    encodeObject (encodeVersionManifestLatestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeVersionManifestLatestPairs : VersionManifestLatest -> List EncodedField
encodeVersionManifestLatestPairs model =
    let
        pairs =
            [ maybeEncode "release" Json.Encode.string model.release
            , maybeEncode "snapshot" Json.Encode.string model.snapshot
            ]
    in
    pairs


encodeVersionPackageInfo : VersionPackageInfo -> Json.Encode.Value
encodeVersionPackageInfo =
    encodeObject << encodeVersionPackageInfoPairs


encodeVersionPackageInfoWithTag : ( String, String ) -> VersionPackageInfo -> Json.Encode.Value
encodeVersionPackageInfoWithTag (tagField, tag) model =
    encodeObject (encodeVersionPackageInfoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeVersionPackageInfoPairs : VersionPackageInfo -> List EncodedField
encodeVersionPackageInfoPairs model =
    let
        pairs =
            [ maybeEncode "version" Json.Encode.string model.version
            , maybeEncode "assetIndex" encodeVersionPackageInfoAssetIndex model.assetIndex
            , maybeEncode "assets" Json.Encode.int model.assets
            , maybeEncode "complianceLevel" Json.Encode.int model.complianceLevel
            , maybeEncode "downloads" encodeVersionPackageInfoDownloads model.downloads
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "javaVersion" encodeVersionPackageInfoJavaVersion model.javaVersion
            , maybeEncode "mainClass" Json.Encode.string model.mainClass
            , maybeEncode "minimumLauncherVersion" Json.Encode.int model.minimumLauncherVersion
            , maybeEncode "time" Api.Time.encodeDateTime model.time
            , maybeEncode "releaseTime" Api.Time.encodeDateTime model.releaseTime
            , maybeEncode "type" Json.Encode.string model.type_
            ]
    in
    pairs


encodeVersionPackageInfoAssetIndex : VersionPackageInfoAssetIndex -> Json.Encode.Value
encodeVersionPackageInfoAssetIndex =
    encodeObject << encodeVersionPackageInfoAssetIndexPairs


encodeVersionPackageInfoAssetIndexWithTag : ( String, String ) -> VersionPackageInfoAssetIndex -> Json.Encode.Value
encodeVersionPackageInfoAssetIndexWithTag (tagField, tag) model =
    encodeObject (encodeVersionPackageInfoAssetIndexPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeVersionPackageInfoAssetIndexPairs : VersionPackageInfoAssetIndex -> List EncodedField
encodeVersionPackageInfoAssetIndexPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "sha1" Json.Encode.string model.sha1
            , maybeEncode "size" Json.Encode.int model.size
            , maybeEncode "totalSize" Json.Encode.int model.totalSize
            , maybeEncode "url" Json.Encode.string model.url
            ]
    in
    pairs


encodeVersionPackageInfoDownloads : VersionPackageInfoDownloads -> Json.Encode.Value
encodeVersionPackageInfoDownloads =
    encodeObject << encodeVersionPackageInfoDownloadsPairs


encodeVersionPackageInfoDownloadsWithTag : ( String, String ) -> VersionPackageInfoDownloads -> Json.Encode.Value
encodeVersionPackageInfoDownloadsWithTag (tagField, tag) model =
    encodeObject (encodeVersionPackageInfoDownloadsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeVersionPackageInfoDownloadsPairs : VersionPackageInfoDownloads -> List EncodedField
encodeVersionPackageInfoDownloadsPairs model =
    let
        pairs =
            [ maybeEncode "client" encodeDownload model.client
            , maybeEncode "client_mappings" encodeDownload model.clientMappings
            , maybeEncode "server" encodeDownload model.server
            , maybeEncode "server_mappings" encodeDownload model.serverMappings
            ]
    in
    pairs


encodeVersionPackageInfoJavaVersion : VersionPackageInfoJavaVersion -> Json.Encode.Value
encodeVersionPackageInfoJavaVersion =
    encodeObject << encodeVersionPackageInfoJavaVersionPairs


encodeVersionPackageInfoJavaVersionWithTag : ( String, String ) -> VersionPackageInfoJavaVersion -> Json.Encode.Value
encodeVersionPackageInfoJavaVersionWithTag (tagField, tag) model =
    encodeObject (encodeVersionPackageInfoJavaVersionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeVersionPackageInfoJavaVersionPairs : VersionPackageInfoJavaVersion -> List EncodedField
encodeVersionPackageInfoJavaVersionPairs model =
    let
        pairs =
            [ maybeEncode "component" Json.Encode.string model.component
            , maybeEncode "majorVersion" Json.Encode.int model.majorVersion
            ]
    in
    pairs


-- DECODER


downloadDecoder : Json.Decode.Decoder Download
downloadDecoder =
    Json.Decode.succeed Download
        |> maybeDecode "sha1" Json.Decode.string Nothing
        |> maybeDecode "size" Json.Decode.int Nothing
        |> maybeDecode "url" Json.Decode.string Nothing


versionDecoder : Json.Decode.Decoder Version
versionDecoder =
    Json.Decode.succeed Version
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "type" Json.Decode.string Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "time" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "releaseTime" Api.Time.dateTimeDecoder Nothing


versionManifestDecoder : Json.Decode.Decoder VersionManifest
versionManifestDecoder =
    Json.Decode.succeed VersionManifest
        |> maybeDecode "latest" versionManifestLatestDecoder Nothing
        |> maybeDecode "versions" (Json.Decode.list versionDecoder) Nothing


versionManifestLatestDecoder : Json.Decode.Decoder VersionManifestLatest
versionManifestLatestDecoder =
    Json.Decode.succeed VersionManifestLatest
        |> maybeDecode "release" Json.Decode.string Nothing
        |> maybeDecode "snapshot" Json.Decode.string Nothing


versionPackageInfoDecoder : Json.Decode.Decoder VersionPackageInfo
versionPackageInfoDecoder =
    Json.Decode.succeed VersionPackageInfo
        |> maybeDecode "version" Json.Decode.string Nothing
        |> maybeDecode "assetIndex" versionPackageInfoAssetIndexDecoder Nothing
        |> maybeDecode "assets" Json.Decode.int Nothing
        |> maybeDecode "complianceLevel" Json.Decode.int Nothing
        |> maybeDecode "downloads" versionPackageInfoDownloadsDecoder Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "javaVersion" versionPackageInfoJavaVersionDecoder Nothing
        |> maybeDecode "mainClass" Json.Decode.string Nothing
        |> maybeDecode "minimumLauncherVersion" Json.Decode.int Nothing
        |> maybeDecode "time" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "releaseTime" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "type" Json.Decode.string Nothing


versionPackageInfoAssetIndexDecoder : Json.Decode.Decoder VersionPackageInfoAssetIndex
versionPackageInfoAssetIndexDecoder =
    Json.Decode.succeed VersionPackageInfoAssetIndex
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "sha1" Json.Decode.string Nothing
        |> maybeDecode "size" Json.Decode.int Nothing
        |> maybeDecode "totalSize" Json.Decode.int Nothing
        |> maybeDecode "url" Json.Decode.string Nothing


versionPackageInfoDownloadsDecoder : Json.Decode.Decoder VersionPackageInfoDownloads
versionPackageInfoDownloadsDecoder =
    Json.Decode.succeed VersionPackageInfoDownloads
        |> maybeDecode "client" downloadDecoder Nothing
        |> maybeDecode "client_mappings" downloadDecoder Nothing
        |> maybeDecode "server" downloadDecoder Nothing
        |> maybeDecode "server_mappings" downloadDecoder Nothing


versionPackageInfoJavaVersionDecoder : Json.Decode.Decoder VersionPackageInfoJavaVersion
versionPackageInfoJavaVersionDecoder =
    Json.Decode.succeed VersionPackageInfoJavaVersion
        |> maybeDecode "component" Json.Decode.string Nothing
        |> maybeDecode "majorVersion" Json.Decode.int Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f