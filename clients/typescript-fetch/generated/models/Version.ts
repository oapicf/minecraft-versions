/* tslint:disable */
/* eslint-disable */
/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * 
     * @type {string}
     * @memberof Version
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Version
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Version
     */
    url?: string;
    /**
     * 
     * @type {Date}
     * @memberof Version
     */
    time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Version
     */
    releaseTime?: Date;
}

/**
 * Check if a given object implements the Version interface.
 */
export function instanceOfVersion(value: object): value is Version {
    return true;
}

export function VersionFromJSON(json: any): Version {
    return VersionFromJSONTyped(json, false);
}

export function VersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Version {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'url': json['url'] == null ? undefined : json['url'],
        'time': json['time'] == null ? undefined : (new Date(json['time'])),
        'releaseTime': json['releaseTime'] == null ? undefined : (new Date(json['releaseTime'])),
    };
}

export function VersionToJSON(json: any): Version {
    return VersionToJSONTyped(json, false);
}

export function VersionToJSONTyped(value?: Version | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'url': value['url'],
        'time': value['time'] == null ? undefined : ((value['time']).toISOString()),
        'releaseTime': value['releaseTime'] == null ? undefined : ((value['releaseTime']).toISOString()),
    };
}

