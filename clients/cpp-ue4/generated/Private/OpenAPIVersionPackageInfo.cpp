/**
 * 
 * SDK for Minecraft versions info
 *
 * OpenAPI spec version: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIVersionPackageInfo.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIVersionPackageInfo::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Version.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("version")); WriteJsonValue(Writer, Version.GetValue());
	}
	if (AssetIndex.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("assetIndex")); WriteJsonValue(Writer, AssetIndex.GetValue());
	}
	if (Assets.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("assets")); WriteJsonValue(Writer, Assets.GetValue());
	}
	if (ComplianceLevel.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("complianceLevel")); WriteJsonValue(Writer, ComplianceLevel.GetValue());
	}
	if (Downloads.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("downloads")); WriteJsonValue(Writer, Downloads.GetValue());
	}
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (JavaVersion.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("javaVersion")); WriteJsonValue(Writer, JavaVersion.GetValue());
	}
	if (MainClass.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("mainClass")); WriteJsonValue(Writer, MainClass.GetValue());
	}
	if (MinimumLauncherVersion.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("minimumLauncherVersion")); WriteJsonValue(Writer, MinimumLauncherVersion.GetValue());
	}
	if (Time.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("time")); WriteJsonValue(Writer, Time.GetValue());
	}
	if (ReleaseTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("releaseTime")); WriteJsonValue(Writer, ReleaseTime.GetValue());
	}
	if (Type.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIVersionPackageInfo::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("version"), Version);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assetIndex"), AssetIndex);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assets"), Assets);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("complianceLevel"), ComplianceLevel);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("downloads"), Downloads);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("javaVersion"), JavaVersion);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("mainClass"), MainClass);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("minimumLauncherVersion"), MinimumLauncherVersion);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("time"), Time);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("releaseTime"), ReleaseTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);

	return ParseSuccess;
}

}
