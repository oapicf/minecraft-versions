# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model import Model
from openapi_server import util


class Version(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, type: str=None, url: str=None, time: datetime=None, release_time: datetime=None):  # noqa: E501
        """Version - a model defined in Swagger

        :param id: The id of this Version.  # noqa: E501
        :type id: str
        :param type: The type of this Version.  # noqa: E501
        :type type: str
        :param url: The url of this Version.  # noqa: E501
        :type url: str
        :param time: The time of this Version.  # noqa: E501
        :type time: datetime
        :param release_time: The release_time of this Version.  # noqa: E501
        :type release_time: datetime
        """
        self.swagger_types = {
            'id': str,
            'type': str,
            'url': str,
            'time': datetime,
            'release_time': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'url': 'url',
            'time': 'time',
            'release_time': 'releaseTime'
        }

        self._id = id
        self._type = type
        self._url = url
        self._time = time
        self._release_time = release_time

    @classmethod
    def from_dict(cls, dikt) -> 'Version':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Version of this Version.  # noqa: E501
        :rtype: Version
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Version.


        :return: The id of this Version.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Version.


        :param id: The id of this Version.
        :type id: str
        """

        self._id = id

    @property
    def type(self) -> str:
        """Gets the type of this Version.


        :return: The type of this Version.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Version.


        :param type: The type of this Version.
        :type type: str
        """

        self._type = type

    @property
    def url(self) -> str:
        """Gets the url of this Version.


        :return: The url of this Version.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Version.


        :param url: The url of this Version.
        :type url: str
        """

        self._url = url

    @property
    def time(self) -> datetime:
        """Gets the time of this Version.


        :return: The time of this Version.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this Version.


        :param time: The time of this Version.
        :type time: datetime
        """

        self._time = time

    @property
    def release_time(self) -> datetime:
        """Gets the release_time of this Version.


        :return: The release_time of this Version.
        :rtype: datetime
        """
        return self._release_time

    @release_time.setter
    def release_time(self, release_time: datetime):
        """Sets the release_time of this Version.


        :param release_time: The release_time of this Version.
        :type release_time: datetime
        """

        self._release_time = release_time
