// <auto-generated>
/*
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VersionPackageInfo
    /// </summary>
    public partial class VersionPackageInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionPackageInfo" /> class.
        /// </summary>
        /// <param name="varVersion">varVersion</param>
        /// <param name="assetIndex">assetIndex</param>
        /// <param name="assets">assets</param>
        /// <param name="complianceLevel">complianceLevel</param>
        /// <param name="downloads">downloads</param>
        /// <param name="id">id</param>
        /// <param name="javaVersion">javaVersion</param>
        /// <param name="mainClass">mainClass</param>
        /// <param name="minimumLauncherVersion">minimumLauncherVersion</param>
        /// <param name="time">time</param>
        /// <param name="releaseTime">releaseTime</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public VersionPackageInfo(Option<string?> varVersion = default, Option<VersionPackageInfoAssetIndex?> assetIndex = default, Option<string?> assets = default, Option<int?> complianceLevel = default, Option<VersionPackageInfoDownloads?> downloads = default, Option<string?> id = default, Option<VersionPackageInfoJavaVersion?> javaVersion = default, Option<string?> mainClass = default, Option<int?> minimumLauncherVersion = default, Option<DateTime?> time = default, Option<DateTime?> releaseTime = default, Option<string?> type = default)
        {
            VarVersionOption = varVersion;
            AssetIndexOption = assetIndex;
            AssetsOption = assets;
            ComplianceLevelOption = complianceLevel;
            DownloadsOption = downloads;
            IdOption = id;
            JavaVersionOption = javaVersion;
            MainClassOption = mainClass;
            MinimumLauncherVersionOption = minimumLauncherVersion;
            TimeOption = time;
            ReleaseTimeOption = releaseTime;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetIndex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VersionPackageInfoAssetIndex?> AssetIndexOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssetIndex
        /// </summary>
        [JsonPropertyName("assetIndex")]
        public VersionPackageInfoAssetIndex? AssetIndex { get { return this.AssetIndexOption; } set { this.AssetIndexOption = new(value); } }

        /// <summary>
        /// Used to track the state of Assets
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [JsonPropertyName("assets")]
        public string? Assets { get { return this.AssetsOption; } set { this.AssetsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ComplianceLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ComplianceLevelOption { get; private set; }

        /// <summary>
        /// Gets or Sets ComplianceLevel
        /// </summary>
        [JsonPropertyName("complianceLevel")]
        public int? ComplianceLevel { get { return this.ComplianceLevelOption; } set { this.ComplianceLevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Downloads
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VersionPackageInfoDownloads?> DownloadsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Downloads
        /// </summary>
        [JsonPropertyName("downloads")]
        public VersionPackageInfoDownloads? Downloads { get { return this.DownloadsOption; } set { this.DownloadsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of JavaVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VersionPackageInfoJavaVersion?> JavaVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets JavaVersion
        /// </summary>
        [JsonPropertyName("javaVersion")]
        public VersionPackageInfoJavaVersion? JavaVersion { get { return this.JavaVersionOption; } set { this.JavaVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of MainClass
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MainClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets MainClass
        /// </summary>
        /* <example>net.minecraft.client.main.Main</example> */
        [JsonPropertyName("mainClass")]
        public string? MainClass { get { return this.MainClassOption; } set { this.MainClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinimumLauncherVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MinimumLauncherVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets MinimumLauncherVersion
        /// </summary>
        /* <example>21</example> */
        [JsonPropertyName("minimumLauncherVersion")]
        public int? MinimumLauncherVersion { get { return this.MinimumLauncherVersionOption; } set { this.MinimumLauncherVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Time
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        /* <example>2024-04-01T11:14:41.000Z</example> */
        [JsonPropertyName("time")]
        public DateTime? Time { get { return this.TimeOption; } set { this.TimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReleaseTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ReleaseTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReleaseTime
        /// </summary>
        /* <example>2024-04-01T11:07:19.000Z</example> */
        [JsonPropertyName("releaseTime")]
        public DateTime? ReleaseTime { get { return this.ReleaseTimeOption; } set { this.ReleaseTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /* <example>snapshot</example> */
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VersionPackageInfo {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  AssetIndex: ").Append(AssetIndex).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  ComplianceLevel: ").Append(ComplianceLevel).Append("\n");
            sb.Append("  Downloads: ").Append(Downloads).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  JavaVersion: ").Append(JavaVersion).Append("\n");
            sb.Append("  MainClass: ").Append(MainClass).Append("\n");
            sb.Append("  MinimumLauncherVersion: ").Append(MinimumLauncherVersion).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  ReleaseTime: ").Append(ReleaseTime).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VersionPackageInfo" />
    /// </summary>
    public class VersionPackageInfoJsonConverter : JsonConverter<VersionPackageInfo>
    {
        /// <summary>
        /// The format to use to serialize Time
        /// </summary>
        public static string TimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ReleaseTime
        /// </summary>
        public static string ReleaseTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="VersionPackageInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VersionPackageInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varVersion = default;
            Option<VersionPackageInfoAssetIndex?> assetIndex = default;
            Option<string?> assets = default;
            Option<int?> complianceLevel = default;
            Option<VersionPackageInfoDownloads?> downloads = default;
            Option<string?> id = default;
            Option<VersionPackageInfoJavaVersion?> javaVersion = default;
            Option<string?> mainClass = default;
            Option<int?> minimumLauncherVersion = default;
            Option<DateTime?> time = default;
            Option<DateTime?> releaseTime = default;
            Option<string?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assetIndex":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                assetIndex = new Option<VersionPackageInfoAssetIndex?>(JsonSerializer.Deserialize<VersionPackageInfoAssetIndex>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "assets":
                            assets = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "complianceLevel":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                complianceLevel = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "downloads":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                downloads = new Option<VersionPackageInfoDownloads?>(JsonSerializer.Deserialize<VersionPackageInfoDownloads>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "javaVersion":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                javaVersion = new Option<VersionPackageInfoJavaVersion?>(JsonSerializer.Deserialize<VersionPackageInfoJavaVersion>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "mainClass":
                            mainClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "minimumLauncherVersion":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minimumLauncherVersion = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                time = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "releaseTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                releaseTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class VersionPackageInfo.");

            if (assetIndex.IsSet && assetIndex.Value == null)
                throw new ArgumentNullException(nameof(assetIndex), "Property is not nullable for class VersionPackageInfo.");

            if (assets.IsSet && assets.Value == null)
                throw new ArgumentNullException(nameof(assets), "Property is not nullable for class VersionPackageInfo.");

            if (complianceLevel.IsSet && complianceLevel.Value == null)
                throw new ArgumentNullException(nameof(complianceLevel), "Property is not nullable for class VersionPackageInfo.");

            if (downloads.IsSet && downloads.Value == null)
                throw new ArgumentNullException(nameof(downloads), "Property is not nullable for class VersionPackageInfo.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class VersionPackageInfo.");

            if (javaVersion.IsSet && javaVersion.Value == null)
                throw new ArgumentNullException(nameof(javaVersion), "Property is not nullable for class VersionPackageInfo.");

            if (mainClass.IsSet && mainClass.Value == null)
                throw new ArgumentNullException(nameof(mainClass), "Property is not nullable for class VersionPackageInfo.");

            if (minimumLauncherVersion.IsSet && minimumLauncherVersion.Value == null)
                throw new ArgumentNullException(nameof(minimumLauncherVersion), "Property is not nullable for class VersionPackageInfo.");

            if (time.IsSet && time.Value == null)
                throw new ArgumentNullException(nameof(time), "Property is not nullable for class VersionPackageInfo.");

            if (releaseTime.IsSet && releaseTime.Value == null)
                throw new ArgumentNullException(nameof(releaseTime), "Property is not nullable for class VersionPackageInfo.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class VersionPackageInfo.");

            return new VersionPackageInfo(varVersion, assetIndex, assets, complianceLevel, downloads, id, javaVersion, mainClass, minimumLauncherVersion, time, releaseTime, type);
        }

        /// <summary>
        /// Serializes a <see cref="VersionPackageInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="versionPackageInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VersionPackageInfo versionPackageInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, versionPackageInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VersionPackageInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="versionPackageInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VersionPackageInfo versionPackageInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (versionPackageInfo.VarVersionOption.IsSet && versionPackageInfo.VarVersion == null)
                throw new ArgumentNullException(nameof(versionPackageInfo.VarVersion), "Property is required for class VersionPackageInfo.");

            if (versionPackageInfo.AssetIndexOption.IsSet && versionPackageInfo.AssetIndex == null)
                throw new ArgumentNullException(nameof(versionPackageInfo.AssetIndex), "Property is required for class VersionPackageInfo.");

            if (versionPackageInfo.AssetsOption.IsSet && versionPackageInfo.Assets == null)
                throw new ArgumentNullException(nameof(versionPackageInfo.Assets), "Property is required for class VersionPackageInfo.");

            if (versionPackageInfo.DownloadsOption.IsSet && versionPackageInfo.Downloads == null)
                throw new ArgumentNullException(nameof(versionPackageInfo.Downloads), "Property is required for class VersionPackageInfo.");

            if (versionPackageInfo.IdOption.IsSet && versionPackageInfo.Id == null)
                throw new ArgumentNullException(nameof(versionPackageInfo.Id), "Property is required for class VersionPackageInfo.");

            if (versionPackageInfo.JavaVersionOption.IsSet && versionPackageInfo.JavaVersion == null)
                throw new ArgumentNullException(nameof(versionPackageInfo.JavaVersion), "Property is required for class VersionPackageInfo.");

            if (versionPackageInfo.MainClassOption.IsSet && versionPackageInfo.MainClass == null)
                throw new ArgumentNullException(nameof(versionPackageInfo.MainClass), "Property is required for class VersionPackageInfo.");

            if (versionPackageInfo.TypeOption.IsSet && versionPackageInfo.Type == null)
                throw new ArgumentNullException(nameof(versionPackageInfo.Type), "Property is required for class VersionPackageInfo.");

            if (versionPackageInfo.VarVersionOption.IsSet)
                writer.WriteString("version", versionPackageInfo.VarVersion);

            if (versionPackageInfo.AssetIndexOption.IsSet)
            {
                writer.WritePropertyName("assetIndex");
                JsonSerializer.Serialize(writer, versionPackageInfo.AssetIndex, jsonSerializerOptions);
            }
            if (versionPackageInfo.AssetsOption.IsSet)
                writer.WriteString("assets", versionPackageInfo.Assets);

            if (versionPackageInfo.ComplianceLevelOption.IsSet)
                writer.WriteNumber("complianceLevel", versionPackageInfo.ComplianceLevelOption.Value!.Value);

            if (versionPackageInfo.DownloadsOption.IsSet)
            {
                writer.WritePropertyName("downloads");
                JsonSerializer.Serialize(writer, versionPackageInfo.Downloads, jsonSerializerOptions);
            }
            if (versionPackageInfo.IdOption.IsSet)
                writer.WriteString("id", versionPackageInfo.Id);

            if (versionPackageInfo.JavaVersionOption.IsSet)
            {
                writer.WritePropertyName("javaVersion");
                JsonSerializer.Serialize(writer, versionPackageInfo.JavaVersion, jsonSerializerOptions);
            }
            if (versionPackageInfo.MainClassOption.IsSet)
                writer.WriteString("mainClass", versionPackageInfo.MainClass);

            if (versionPackageInfo.MinimumLauncherVersionOption.IsSet)
                writer.WriteNumber("minimumLauncherVersion", versionPackageInfo.MinimumLauncherVersionOption.Value!.Value);

            if (versionPackageInfo.TimeOption.IsSet)
                writer.WriteString("time", versionPackageInfo.TimeOption.Value!.Value.ToString(TimeFormat));

            if (versionPackageInfo.ReleaseTimeOption.IsSet)
                writer.WriteString("releaseTime", versionPackageInfo.ReleaseTimeOption.Value!.Value.ToString(ReleaseTimeFormat));

            if (versionPackageInfo.TypeOption.IsSet)
                writer.WriteString("type", versionPackageInfo.Type);
        }
    }
}
