// <auto-generated>
/*
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VersionManifest
    /// </summary>
    public partial class VersionManifest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionManifest" /> class.
        /// </summary>
        /// <param name="latest">latest</param>
        /// <param name="versions">versions</param>
        [JsonConstructor]
        public VersionManifest(Option<VersionManifestLatest?> latest = default, Option<List<ModelVersion>?> versions = default)
        {
            LatestOption = latest;
            VersionsOption = versions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Latest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VersionManifestLatest?> LatestOption { get; private set; }

        /// <summary>
        /// Gets or Sets Latest
        /// </summary>
        [JsonPropertyName("latest")]
        public VersionManifestLatest? Latest { get { return this.LatestOption; } set { this.LatestOption = new(value); } }

        /// <summary>
        /// Used to track the state of Versions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ModelVersion>?> VersionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Versions
        /// </summary>
        [JsonPropertyName("versions")]
        public List<ModelVersion>? Versions { get { return this.VersionsOption; } set { this.VersionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VersionManifest {\n");
            sb.Append("  Latest: ").Append(Latest).Append("\n");
            sb.Append("  Versions: ").Append(Versions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VersionManifest" />
    /// </summary>
    public class VersionManifestJsonConverter : JsonConverter<VersionManifest>
    {
        /// <summary>
        /// Deserializes json to <see cref="VersionManifest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VersionManifest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<VersionManifestLatest?> latest = default;
            Option<List<ModelVersion>?> versions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "latest":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                latest = new Option<VersionManifestLatest?>(JsonSerializer.Deserialize<VersionManifestLatest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "versions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                versions = new Option<List<ModelVersion>?>(JsonSerializer.Deserialize<List<ModelVersion>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (latest.IsSet && latest.Value == null)
                throw new ArgumentNullException(nameof(latest), "Property is not nullable for class VersionManifest.");

            if (versions.IsSet && versions.Value == null)
                throw new ArgumentNullException(nameof(versions), "Property is not nullable for class VersionManifest.");

            return new VersionManifest(latest, versions);
        }

        /// <summary>
        /// Serializes a <see cref="VersionManifest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="versionManifest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VersionManifest versionManifest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, versionManifest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VersionManifest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="versionManifest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VersionManifest versionManifest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (versionManifest.LatestOption.IsSet && versionManifest.Latest == null)
                throw new ArgumentNullException(nameof(versionManifest.Latest), "Property is required for class VersionManifest.");

            if (versionManifest.VersionsOption.IsSet && versionManifest.Versions == null)
                throw new ArgumentNullException(nameof(versionManifest.Versions), "Property is required for class VersionManifest.");

            if (versionManifest.LatestOption.IsSet)
            {
                writer.WritePropertyName("latest");
                JsonSerializer.Serialize(writer, versionManifest.Latest, jsonSerializerOptions);
            }
            if (versionManifest.VersionsOption.IsSet)
            {
                writer.WritePropertyName("versions");
                JsonSerializer.Serialize(writer, versionManifest.Versions, jsonSerializerOptions);
            }
        }
    }
}
