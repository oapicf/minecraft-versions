// <auto-generated>
/*
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VersionPackageInfoDownloads
    /// </summary>
    public partial class VersionPackageInfoDownloads : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionPackageInfoDownloads" /> class.
        /// </summary>
        /// <param name="varClient">varClient</param>
        /// <param name="clientMappings">clientMappings</param>
        /// <param name="server">server</param>
        /// <param name="serverMappings">serverMappings</param>
        [JsonConstructor]
        public VersionPackageInfoDownloads(Option<Download?> varClient = default, Option<Download?> clientMappings = default, Option<Download?> server = default, Option<Download?> serverMappings = default)
        {
            VarClientOption = varClient;
            ClientMappingsOption = clientMappings;
            ServerOption = server;
            ServerMappingsOption = serverMappings;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VarClient
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Download?> VarClientOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarClient
        /// </summary>
        [JsonPropertyName("client")]
        public Download? VarClient { get { return this.VarClientOption; } set { this.VarClientOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClientMappings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Download?> ClientMappingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClientMappings
        /// </summary>
        [JsonPropertyName("client_mappings")]
        public Download? ClientMappings { get { return this.ClientMappingsOption; } set { this.ClientMappingsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Server
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Download?> ServerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [JsonPropertyName("server")]
        public Download? Server { get { return this.ServerOption; } set { this.ServerOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServerMappings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Download?> ServerMappingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ServerMappings
        /// </summary>
        [JsonPropertyName("server_mappings")]
        public Download? ServerMappings { get { return this.ServerMappingsOption; } set { this.ServerMappingsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VersionPackageInfoDownloads {\n");
            sb.Append("  VarClient: ").Append(VarClient).Append("\n");
            sb.Append("  ClientMappings: ").Append(ClientMappings).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  ServerMappings: ").Append(ServerMappings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VersionPackageInfoDownloads" />
    /// </summary>
    public class VersionPackageInfoDownloadsJsonConverter : JsonConverter<VersionPackageInfoDownloads>
    {
        /// <summary>
        /// Deserializes json to <see cref="VersionPackageInfoDownloads" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VersionPackageInfoDownloads Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Download?> varClient = default;
            Option<Download?> clientMappings = default;
            Option<Download?> server = default;
            Option<Download?> serverMappings = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "client":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varClient = new Option<Download?>(JsonSerializer.Deserialize<Download>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "client_mappings":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                clientMappings = new Option<Download?>(JsonSerializer.Deserialize<Download>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "server":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                server = new Option<Download?>(JsonSerializer.Deserialize<Download>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "server_mappings":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                serverMappings = new Option<Download?>(JsonSerializer.Deserialize<Download>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClient.IsSet && varClient.Value == null)
                throw new ArgumentNullException(nameof(varClient), "Property is not nullable for class VersionPackageInfoDownloads.");

            if (clientMappings.IsSet && clientMappings.Value == null)
                throw new ArgumentNullException(nameof(clientMappings), "Property is not nullable for class VersionPackageInfoDownloads.");

            if (server.IsSet && server.Value == null)
                throw new ArgumentNullException(nameof(server), "Property is not nullable for class VersionPackageInfoDownloads.");

            if (serverMappings.IsSet && serverMappings.Value == null)
                throw new ArgumentNullException(nameof(serverMappings), "Property is not nullable for class VersionPackageInfoDownloads.");

            return new VersionPackageInfoDownloads(varClient, clientMappings, server, serverMappings);
        }

        /// <summary>
        /// Serializes a <see cref="VersionPackageInfoDownloads" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="versionPackageInfoDownloads"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VersionPackageInfoDownloads versionPackageInfoDownloads, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, versionPackageInfoDownloads, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VersionPackageInfoDownloads" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="versionPackageInfoDownloads"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VersionPackageInfoDownloads versionPackageInfoDownloads, JsonSerializerOptions jsonSerializerOptions)
        {
            if (versionPackageInfoDownloads.VarClientOption.IsSet && versionPackageInfoDownloads.VarClient == null)
                throw new ArgumentNullException(nameof(versionPackageInfoDownloads.VarClient), "Property is required for class VersionPackageInfoDownloads.");

            if (versionPackageInfoDownloads.ClientMappingsOption.IsSet && versionPackageInfoDownloads.ClientMappings == null)
                throw new ArgumentNullException(nameof(versionPackageInfoDownloads.ClientMappings), "Property is required for class VersionPackageInfoDownloads.");

            if (versionPackageInfoDownloads.ServerOption.IsSet && versionPackageInfoDownloads.Server == null)
                throw new ArgumentNullException(nameof(versionPackageInfoDownloads.Server), "Property is required for class VersionPackageInfoDownloads.");

            if (versionPackageInfoDownloads.ServerMappingsOption.IsSet && versionPackageInfoDownloads.ServerMappings == null)
                throw new ArgumentNullException(nameof(versionPackageInfoDownloads.ServerMappings), "Property is required for class VersionPackageInfoDownloads.");

            if (versionPackageInfoDownloads.VarClientOption.IsSet)
            {
                writer.WritePropertyName("client");
                JsonSerializer.Serialize(writer, versionPackageInfoDownloads.VarClient, jsonSerializerOptions);
            }
            if (versionPackageInfoDownloads.ClientMappingsOption.IsSet)
            {
                writer.WritePropertyName("client_mappings");
                JsonSerializer.Serialize(writer, versionPackageInfoDownloads.ClientMappings, jsonSerializerOptions);
            }
            if (versionPackageInfoDownloads.ServerOption.IsSet)
            {
                writer.WritePropertyName("server");
                JsonSerializer.Serialize(writer, versionPackageInfoDownloads.Server, jsonSerializerOptions);
            }
            if (versionPackageInfoDownloads.ServerMappingsOption.IsSet)
            {
                writer.WritePropertyName("server_mappings");
                JsonSerializer.Serialize(writer, versionPackageInfoDownloads.ServerMappings, jsonSerializerOptions);
            }
        }
    }
}
