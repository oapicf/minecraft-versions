// <auto-generated>
/*
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VersionPackageInfoAssetIndex
    /// </summary>
    public partial class VersionPackageInfoAssetIndex : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionPackageInfoAssetIndex" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="sha1">sha1</param>
        /// <param name="size">size</param>
        /// <param name="totalSize">totalSize</param>
        /// <param name="url">url</param>
        [JsonConstructor]
        public VersionPackageInfoAssetIndex(Option<string?> id = default, Option<string?> sha1 = default, Option<int?> size = default, Option<int?> totalSize = default, Option<string?> url = default)
        {
            IdOption = id;
            Sha1Option = sha1;
            SizeOption = size;
            TotalSizeOption = totalSize;
            UrlOption = url;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sha1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Sha1Option { get; private set; }

        /// <summary>
        /// Gets or Sets Sha1
        /// </summary>
        [JsonPropertyName("sha1")]
        public string? Sha1 { get { return this.Sha1Option; } set { this.Sha1Option = new(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalSizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalSize
        /// </summary>
        [JsonPropertyName("totalSize")]
        public int? TotalSize { get { return this.TotalSizeOption; } set { this.TotalSizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VersionPackageInfoAssetIndex {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sha1: ").Append(Sha1).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  TotalSize: ").Append(TotalSize).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VersionPackageInfoAssetIndex" />
    /// </summary>
    public class VersionPackageInfoAssetIndexJsonConverter : JsonConverter<VersionPackageInfoAssetIndex>
    {
        /// <summary>
        /// Deserializes json to <see cref="VersionPackageInfoAssetIndex" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VersionPackageInfoAssetIndex Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> sha1 = default;
            Option<int?> size = default;
            Option<int?> totalSize = default;
            Option<string?> url = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sha1":
                            sha1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "size":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                size = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "totalSize":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalSize = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class VersionPackageInfoAssetIndex.");

            if (sha1.IsSet && sha1.Value == null)
                throw new ArgumentNullException(nameof(sha1), "Property is not nullable for class VersionPackageInfoAssetIndex.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class VersionPackageInfoAssetIndex.");

            if (totalSize.IsSet && totalSize.Value == null)
                throw new ArgumentNullException(nameof(totalSize), "Property is not nullable for class VersionPackageInfoAssetIndex.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class VersionPackageInfoAssetIndex.");

            return new VersionPackageInfoAssetIndex(id, sha1, size, totalSize, url);
        }

        /// <summary>
        /// Serializes a <see cref="VersionPackageInfoAssetIndex" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="versionPackageInfoAssetIndex"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VersionPackageInfoAssetIndex versionPackageInfoAssetIndex, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, versionPackageInfoAssetIndex, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VersionPackageInfoAssetIndex" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="versionPackageInfoAssetIndex"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VersionPackageInfoAssetIndex versionPackageInfoAssetIndex, JsonSerializerOptions jsonSerializerOptions)
        {
            if (versionPackageInfoAssetIndex.IdOption.IsSet && versionPackageInfoAssetIndex.Id == null)
                throw new ArgumentNullException(nameof(versionPackageInfoAssetIndex.Id), "Property is required for class VersionPackageInfoAssetIndex.");

            if (versionPackageInfoAssetIndex.Sha1Option.IsSet && versionPackageInfoAssetIndex.Sha1 == null)
                throw new ArgumentNullException(nameof(versionPackageInfoAssetIndex.Sha1), "Property is required for class VersionPackageInfoAssetIndex.");

            if (versionPackageInfoAssetIndex.UrlOption.IsSet && versionPackageInfoAssetIndex.Url == null)
                throw new ArgumentNullException(nameof(versionPackageInfoAssetIndex.Url), "Property is required for class VersionPackageInfoAssetIndex.");

            if (versionPackageInfoAssetIndex.IdOption.IsSet)
                writer.WriteString("id", versionPackageInfoAssetIndex.Id);

            if (versionPackageInfoAssetIndex.Sha1Option.IsSet)
                writer.WriteString("sha1", versionPackageInfoAssetIndex.Sha1);

            if (versionPackageInfoAssetIndex.SizeOption.IsSet)
                writer.WriteNumber("size", versionPackageInfoAssetIndex.SizeOption.Value!.Value);

            if (versionPackageInfoAssetIndex.TotalSizeOption.IsSet)
                writer.WriteNumber("totalSize", versionPackageInfoAssetIndex.TotalSizeOption.Value!.Value);

            if (versionPackageInfoAssetIndex.UrlOption.IsSet)
                writer.WriteString("url", versionPackageInfoAssetIndex.Url);
        }
    }
}
