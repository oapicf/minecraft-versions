// <auto-generated>
/*
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VersionPackageInfoJavaVersion
    /// </summary>
    public partial class VersionPackageInfoJavaVersion : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionPackageInfoJavaVersion" /> class.
        /// </summary>
        /// <param name="component">component</param>
        /// <param name="majorVersion">majorVersion</param>
        [JsonConstructor]
        public VersionPackageInfoJavaVersion(Option<string?> component = default, Option<int?> majorVersion = default)
        {
            ComponentOption = component;
            MajorVersionOption = majorVersion;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Component
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ComponentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Component
        /// </summary>
        [JsonPropertyName("component")]
        public string? Component { get { return this.ComponentOption; } set { this.ComponentOption = new(value); } }

        /// <summary>
        /// Used to track the state of MajorVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MajorVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets MajorVersion
        /// </summary>
        [JsonPropertyName("majorVersion")]
        public int? MajorVersion { get { return this.MajorVersionOption; } set { this.MajorVersionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VersionPackageInfoJavaVersion {\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  MajorVersion: ").Append(MajorVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VersionPackageInfoJavaVersion" />
    /// </summary>
    public class VersionPackageInfoJavaVersionJsonConverter : JsonConverter<VersionPackageInfoJavaVersion>
    {
        /// <summary>
        /// Deserializes json to <see cref="VersionPackageInfoJavaVersion" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VersionPackageInfoJavaVersion Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> component = default;
            Option<int?> majorVersion = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "component":
                            component = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "majorVersion":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                majorVersion = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (component.IsSet && component.Value == null)
                throw new ArgumentNullException(nameof(component), "Property is not nullable for class VersionPackageInfoJavaVersion.");

            if (majorVersion.IsSet && majorVersion.Value == null)
                throw new ArgumentNullException(nameof(majorVersion), "Property is not nullable for class VersionPackageInfoJavaVersion.");

            return new VersionPackageInfoJavaVersion(component, majorVersion);
        }

        /// <summary>
        /// Serializes a <see cref="VersionPackageInfoJavaVersion" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="versionPackageInfoJavaVersion"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VersionPackageInfoJavaVersion versionPackageInfoJavaVersion, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, versionPackageInfoJavaVersion, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VersionPackageInfoJavaVersion" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="versionPackageInfoJavaVersion"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VersionPackageInfoJavaVersion versionPackageInfoJavaVersion, JsonSerializerOptions jsonSerializerOptions)
        {
            if (versionPackageInfoJavaVersion.ComponentOption.IsSet && versionPackageInfoJavaVersion.Component == null)
                throw new ArgumentNullException(nameof(versionPackageInfoJavaVersion.Component), "Property is required for class VersionPackageInfoJavaVersion.");

            if (versionPackageInfoJavaVersion.ComponentOption.IsSet)
                writer.WriteString("component", versionPackageInfoJavaVersion.Component);

            if (versionPackageInfoJavaVersion.MajorVersionOption.IsSet)
                writer.WriteNumber("majorVersion", versionPackageInfoJavaVersion.MajorVersionOption.Value!.Value);
        }
    }
}
