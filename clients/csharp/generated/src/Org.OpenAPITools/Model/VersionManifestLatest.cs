// <auto-generated>
/*
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VersionManifestLatest
    /// </summary>
    public partial class VersionManifestLatest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionManifestLatest" /> class.
        /// </summary>
        /// <param name="release">release</param>
        /// <param name="snapshot">snapshot</param>
        [JsonConstructor]
        public VersionManifestLatest(Option<string?> release = default, Option<string?> snapshot = default)
        {
            ReleaseOption = release;
            SnapshotOption = snapshot;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Release
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReleaseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Release
        /// </summary>
        /* <example>1.21</example> */
        [JsonPropertyName("release")]
        public string? Release { get { return this.ReleaseOption; } set { this.ReleaseOption = new(value); } }

        /// <summary>
        /// Used to track the state of Snapshot
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SnapshotOption { get; private set; }

        /// <summary>
        /// Gets or Sets Snapshot
        /// </summary>
        /* <example>24w14potato</example> */
        [JsonPropertyName("snapshot")]
        public string? Snapshot { get { return this.SnapshotOption; } set { this.SnapshotOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VersionManifestLatest {\n");
            sb.Append("  Release: ").Append(Release).Append("\n");
            sb.Append("  Snapshot: ").Append(Snapshot).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VersionManifestLatest" />
    /// </summary>
    public class VersionManifestLatestJsonConverter : JsonConverter<VersionManifestLatest>
    {
        /// <summary>
        /// Deserializes json to <see cref="VersionManifestLatest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VersionManifestLatest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> release = default;
            Option<string?> snapshot = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "release":
                            release = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "snapshot":
                            snapshot = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (release.IsSet && release.Value == null)
                throw new ArgumentNullException(nameof(release), "Property is not nullable for class VersionManifestLatest.");

            if (snapshot.IsSet && snapshot.Value == null)
                throw new ArgumentNullException(nameof(snapshot), "Property is not nullable for class VersionManifestLatest.");

            return new VersionManifestLatest(release, snapshot);
        }

        /// <summary>
        /// Serializes a <see cref="VersionManifestLatest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="versionManifestLatest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VersionManifestLatest versionManifestLatest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, versionManifestLatest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VersionManifestLatest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="versionManifestLatest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VersionManifestLatest versionManifestLatest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (versionManifestLatest.ReleaseOption.IsSet && versionManifestLatest.Release == null)
                throw new ArgumentNullException(nameof(versionManifestLatest.Release), "Property is required for class VersionManifestLatest.");

            if (versionManifestLatest.SnapshotOption.IsSet && versionManifestLatest.Snapshot == null)
                throw new ArgumentNullException(nameof(versionManifestLatest.Snapshot), "Property is required for class VersionManifestLatest.");

            if (versionManifestLatest.ReleaseOption.IsSet)
                writer.WriteString("release", versionManifestLatest.Release);

            if (versionManifestLatest.SnapshotOption.IsSet)
                writer.WriteString("snapshot", versionManifestLatest.Snapshot);
        }
    }
}
