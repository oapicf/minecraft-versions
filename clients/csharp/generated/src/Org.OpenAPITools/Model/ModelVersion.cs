// <auto-generated>
/*
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModelVersion
    /// </summary>
    public partial class ModelVersion : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelVersion" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="type">type</param>
        /// <param name="url">url</param>
        /// <param name="time">time</param>
        /// <param name="releaseTime">releaseTime</param>
        [JsonConstructor]
        public ModelVersion(Option<string?> id = default, Option<string?> type = default, Option<string?> url = default, Option<DateTime?> time = default, Option<DateTime?> releaseTime = default)
        {
            IdOption = id;
            TypeOption = type;
            UrlOption = url;
            TimeOption = time;
            ReleaseTimeOption = releaseTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>24w14potato</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /* <example>snapshot</example> */
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        /* <example>https://piston-meta.mojang.com/v1/packages/21df7f4ba484a6437ab5e9dca0b4dfb5dcefc802/24w14potato.json</example> */
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Time
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        /* <example>2024-04-01T11:14:41.000Z</example> */
        [JsonPropertyName("time")]
        public DateTime? Time { get { return this.TimeOption; } set { this.TimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReleaseTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ReleaseTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReleaseTime
        /// </summary>
        /* <example>2024-04-01T11:07:19.000Z</example> */
        [JsonPropertyName("releaseTime")]
        public DateTime? ReleaseTime { get { return this.ReleaseTimeOption; } set { this.ReleaseTimeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelVersion {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  ReleaseTime: ").Append(ReleaseTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ModelVersion" />
    /// </summary>
    public class ModelVersionJsonConverter : JsonConverter<ModelVersion>
    {
        /// <summary>
        /// The format to use to serialize Time
        /// </summary>
        public static string TimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ReleaseTime
        /// </summary>
        public static string ReleaseTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ModelVersion" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ModelVersion Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> type = default;
            Option<string?> url = default;
            Option<DateTime?> time = default;
            Option<DateTime?> releaseTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                time = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "releaseTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                releaseTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ModelVersion.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ModelVersion.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class ModelVersion.");

            if (time.IsSet && time.Value == null)
                throw new ArgumentNullException(nameof(time), "Property is not nullable for class ModelVersion.");

            if (releaseTime.IsSet && releaseTime.Value == null)
                throw new ArgumentNullException(nameof(releaseTime), "Property is not nullable for class ModelVersion.");

            return new ModelVersion(id, type, url, time, releaseTime);
        }

        /// <summary>
        /// Serializes a <see cref="ModelVersion" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modelVersion"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ModelVersion modelVersion, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, modelVersion, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ModelVersion" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modelVersion"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ModelVersion modelVersion, JsonSerializerOptions jsonSerializerOptions)
        {
            if (modelVersion.IdOption.IsSet && modelVersion.Id == null)
                throw new ArgumentNullException(nameof(modelVersion.Id), "Property is required for class ModelVersion.");

            if (modelVersion.TypeOption.IsSet && modelVersion.Type == null)
                throw new ArgumentNullException(nameof(modelVersion.Type), "Property is required for class ModelVersion.");

            if (modelVersion.UrlOption.IsSet && modelVersion.Url == null)
                throw new ArgumentNullException(nameof(modelVersion.Url), "Property is required for class ModelVersion.");

            if (modelVersion.IdOption.IsSet)
                writer.WriteString("id", modelVersion.Id);

            if (modelVersion.TypeOption.IsSet)
                writer.WriteString("type", modelVersion.Type);

            if (modelVersion.UrlOption.IsSet)
                writer.WriteString("url", modelVersion.Url);

            if (modelVersion.TimeOption.IsSet)
                writer.WriteString("time", modelVersion.TimeOption.Value!.Value.ToString(TimeFormat));

            if (modelVersion.ReleaseTimeOption.IsSet)
                writer.WriteString("releaseTime", modelVersion.ReleaseTimeOption.Value!.Value.ToString(ReleaseTimeFormat));
        }
    }
}
