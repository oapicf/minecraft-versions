#
# SDK for Minecraft versions info
# Version: 1.1.1-pre.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Client
No description available.
.PARAMETER ClientMappings
No description available.
.PARAMETER Server
No description available.
.PARAMETER ServerMappings
No description available.
.OUTPUTS

VersionPackageInfoDownloads<PSCustomObject>
#>

function Initialize-VersionPackageInfoDownloads {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Client},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ClientMappings},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Server},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ServerMappings}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => VersionPackageInfoDownloads' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "client" = ${Client}
            "client_mappings" = ${ClientMappings}
            "server" = ${Server}
            "server_mappings" = ${ServerMappings}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VersionPackageInfoDownloads<PSCustomObject>

.DESCRIPTION

Convert from JSON to VersionPackageInfoDownloads<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VersionPackageInfoDownloads<PSCustomObject>
#>
function ConvertFrom-JsonToVersionPackageInfoDownloads {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => VersionPackageInfoDownloads' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in VersionPackageInfoDownloads
        $AllProperties = ("client", "client_mappings", "server", "server_mappings")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "client"))) { #optional property not found
            $Client = $null
        } else {
            $Client = $JsonParameters.PSobject.Properties["client"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "client_mappings"))) { #optional property not found
            $ClientMappings = $null
        } else {
            $ClientMappings = $JsonParameters.PSobject.Properties["client_mappings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "server"))) { #optional property not found
            $Server = $null
        } else {
            $Server = $JsonParameters.PSobject.Properties["server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "server_mappings"))) { #optional property not found
            $ServerMappings = $null
        } else {
            $ServerMappings = $JsonParameters.PSobject.Properties["server_mappings"].value
        }

        $PSO = [PSCustomObject]@{
            "client" = ${Client}
            "client_mappings" = ${ClientMappings}
            "server" = ${Server}
            "server_mappings" = ${ServerMappings}
        }

        return $PSO
    }

}

