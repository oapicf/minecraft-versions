#
# SDK for Minecraft versions info
# Version: 1.1.1-pre.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Version
No description available.
.PARAMETER AssetIndex
No description available.
.PARAMETER Assets
No description available.
.PARAMETER ComplianceLevel
No description available.
.PARAMETER Downloads
No description available.
.PARAMETER Id
No description available.
.PARAMETER JavaVersion
No description available.
.PARAMETER MainClass
No description available.
.PARAMETER MinimumLauncherVersion
No description available.
.PARAMETER Time
No description available.
.PARAMETER ReleaseTime
No description available.
.PARAMETER Type
No description available.
.OUTPUTS

VersionPackageInfo<PSCustomObject>
#>

function Initialize-VersionPackageInfo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AssetIndex},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Assets},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ComplianceLevel},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Downloads},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${JavaVersion},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MainClass},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinimumLauncherVersion},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Time},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ReleaseTime},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => VersionPackageInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "version" = ${Version}
            "assetIndex" = ${AssetIndex}
            "assets" = ${Assets}
            "complianceLevel" = ${ComplianceLevel}
            "downloads" = ${Downloads}
            "id" = ${Id}
            "javaVersion" = ${JavaVersion}
            "mainClass" = ${MainClass}
            "minimumLauncherVersion" = ${MinimumLauncherVersion}
            "time" = ${Time}
            "releaseTime" = ${ReleaseTime}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VersionPackageInfo<PSCustomObject>

.DESCRIPTION

Convert from JSON to VersionPackageInfo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VersionPackageInfo<PSCustomObject>
#>
function ConvertFrom-JsonToVersionPackageInfo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => VersionPackageInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in VersionPackageInfo
        $AllProperties = ("version", "assetIndex", "assets", "complianceLevel", "downloads", "id", "javaVersion", "mainClass", "minimumLauncherVersion", "time", "releaseTime", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assetIndex"))) { #optional property not found
            $AssetIndex = $null
        } else {
            $AssetIndex = $JsonParameters.PSobject.Properties["assetIndex"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assets"))) { #optional property not found
            $Assets = $null
        } else {
            $Assets = $JsonParameters.PSobject.Properties["assets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "complianceLevel"))) { #optional property not found
            $ComplianceLevel = $null
        } else {
            $ComplianceLevel = $JsonParameters.PSobject.Properties["complianceLevel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "downloads"))) { #optional property not found
            $Downloads = $null
        } else {
            $Downloads = $JsonParameters.PSobject.Properties["downloads"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "javaVersion"))) { #optional property not found
            $JavaVersion = $null
        } else {
            $JavaVersion = $JsonParameters.PSobject.Properties["javaVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mainClass"))) { #optional property not found
            $MainClass = $null
        } else {
            $MainClass = $JsonParameters.PSobject.Properties["mainClass"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minimumLauncherVersion"))) { #optional property not found
            $MinimumLauncherVersion = $null
        } else {
            $MinimumLauncherVersion = $JsonParameters.PSobject.Properties["minimumLauncherVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time"))) { #optional property not found
            $Time = $null
        } else {
            $Time = $JsonParameters.PSobject.Properties["time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "releaseTime"))) { #optional property not found
            $ReleaseTime = $null
        } else {
            $ReleaseTime = $JsonParameters.PSobject.Properties["releaseTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "version" = ${Version}
            "assetIndex" = ${AssetIndex}
            "assets" = ${Assets}
            "complianceLevel" = ${ComplianceLevel}
            "downloads" = ${Downloads}
            "id" = ${Id}
            "javaVersion" = ${JavaVersion}
            "mainClass" = ${MainClass}
            "minimumLauncherVersion" = ${MinimumLauncherVersion}
            "time" = ${Time}
            "releaseTime" = ${ReleaseTime}
            "type" = ${Type}
        }

        return $PSO
    }

}

