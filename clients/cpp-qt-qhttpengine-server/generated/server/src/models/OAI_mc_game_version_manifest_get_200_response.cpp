/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_mc_game_version_manifest_get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_mc_game_version_manifest_get_200_response::OAI_mc_game_version_manifest_get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_mc_game_version_manifest_get_200_response::OAI_mc_game_version_manifest_get_200_response() {
    this->initializeModel();
}

OAI_mc_game_version_manifest_get_200_response::~OAI_mc_game_version_manifest_get_200_response() {}

void OAI_mc_game_version_manifest_get_200_response::initializeModel() {

    m_latest_isSet = false;
    m_latest_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAI_mc_game_version_manifest_get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_mc_game_version_manifest_get_200_response::fromJsonObject(QJsonObject json) {

    m_latest_isValid = ::OpenAPI::fromJsonValue(latest, json[QString("latest")]);
    m_latest_isSet = !json[QString("latest")].isNull() && m_latest_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;
}

QString OAI_mc_game_version_manifest_get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_mc_game_version_manifest_get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (latest.isSet()) {
        obj.insert(QString("latest"), ::OpenAPI::toJsonValue(latest));
    }
    if (versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(versions));
    }
    return obj;
}

OAI_mc_game_version_manifest_get_200_response_latest OAI_mc_game_version_manifest_get_200_response::getLatest() const {
    return latest;
}
void OAI_mc_game_version_manifest_get_200_response::setLatest(const OAI_mc_game_version_manifest_get_200_response_latest &latest) {
    this->latest = latest;
    this->m_latest_isSet = true;
}

bool OAI_mc_game_version_manifest_get_200_response::is_latest_Set() const{
    return m_latest_isSet;
}

bool OAI_mc_game_version_manifest_get_200_response::is_latest_Valid() const{
    return m_latest_isValid;
}

QList<OAI_mc_game_version_manifest_get_200_response_versions_inner> OAI_mc_game_version_manifest_get_200_response::getVersions() const {
    return versions;
}
void OAI_mc_game_version_manifest_get_200_response::setVersions(const QList<OAI_mc_game_version_manifest_get_200_response_versions_inner> &versions) {
    this->versions = versions;
    this->m_versions_isSet = true;
}

bool OAI_mc_game_version_manifest_get_200_response::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAI_mc_game_version_manifest_get_200_response::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAI_mc_game_version_manifest_get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (latest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_mc_game_version_manifest_get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
