/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_mc_game_version_manifest_get_200_response_latest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_mc_game_version_manifest_get_200_response_latest::OAI_mc_game_version_manifest_get_200_response_latest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_mc_game_version_manifest_get_200_response_latest::OAI_mc_game_version_manifest_get_200_response_latest() {
    this->initializeModel();
}

OAI_mc_game_version_manifest_get_200_response_latest::~OAI_mc_game_version_manifest_get_200_response_latest() {}

void OAI_mc_game_version_manifest_get_200_response_latest::initializeModel() {

    m_release_isSet = false;
    m_release_isValid = false;

    m_snapshot_isSet = false;
    m_snapshot_isValid = false;
}

void OAI_mc_game_version_manifest_get_200_response_latest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_mc_game_version_manifest_get_200_response_latest::fromJsonObject(QJsonObject json) {

    m_release_isValid = ::OpenAPI::fromJsonValue(release, json[QString("release")]);
    m_release_isSet = !json[QString("release")].isNull() && m_release_isValid;

    m_snapshot_isValid = ::OpenAPI::fromJsonValue(snapshot, json[QString("snapshot")]);
    m_snapshot_isSet = !json[QString("snapshot")].isNull() && m_snapshot_isValid;
}

QString OAI_mc_game_version_manifest_get_200_response_latest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_mc_game_version_manifest_get_200_response_latest::asJsonObject() const {
    QJsonObject obj;
    if (m_release_isSet) {
        obj.insert(QString("release"), ::OpenAPI::toJsonValue(release));
    }
    if (m_snapshot_isSet) {
        obj.insert(QString("snapshot"), ::OpenAPI::toJsonValue(snapshot));
    }
    return obj;
}

QString OAI_mc_game_version_manifest_get_200_response_latest::getRelease() const {
    return release;
}
void OAI_mc_game_version_manifest_get_200_response_latest::setRelease(const QString &release) {
    this->release = release;
    this->m_release_isSet = true;
}

bool OAI_mc_game_version_manifest_get_200_response_latest::is_release_Set() const{
    return m_release_isSet;
}

bool OAI_mc_game_version_manifest_get_200_response_latest::is_release_Valid() const{
    return m_release_isValid;
}

QString OAI_mc_game_version_manifest_get_200_response_latest::getSnapshot() const {
    return snapshot;
}
void OAI_mc_game_version_manifest_get_200_response_latest::setSnapshot(const QString &snapshot) {
    this->snapshot = snapshot;
    this->m_snapshot_isSet = true;
}

bool OAI_mc_game_version_manifest_get_200_response_latest::is_snapshot_Set() const{
    return m_snapshot_isSet;
}

bool OAI_mc_game_version_manifest_get_200_response_latest::is_snapshot_Valid() const{
    return m_snapshot_isValid;
}

bool OAI_mc_game_version_manifest_get_200_response_latest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_mc_game_version_manifest_get_200_response_latest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
