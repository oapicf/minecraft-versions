/**
 * 
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVersionPackageInfo.h
 *
 * 
 */

#ifndef OAIVersionPackageInfo_H
#define OAIVersionPackageInfo_H

#include <QJsonObject>

#include "OAIVersionPackageInfo_assetIndex.h"
#include "OAIVersionPackageInfo_downloads.h"
#include "OAIVersionPackageInfo_javaVersion.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVersionPackageInfo : public OAIObject {
public:
    OAIVersionPackageInfo();
    OAIVersionPackageInfo(QString json);
    ~OAIVersionPackageInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    OAIVersionPackageInfo_assetIndex getAssetIndex() const;
    void setAssetIndex(const OAIVersionPackageInfo_assetIndex &asset_index);
    bool is_asset_index_Set() const;
    bool is_asset_index_Valid() const;

    QString getAssets() const;
    void setAssets(const QString &assets);
    bool is_assets_Set() const;
    bool is_assets_Valid() const;

    qint32 getComplianceLevel() const;
    void setComplianceLevel(const qint32 &compliance_level);
    bool is_compliance_level_Set() const;
    bool is_compliance_level_Valid() const;

    OAIVersionPackageInfo_downloads getDownloads() const;
    void setDownloads(const OAIVersionPackageInfo_downloads &downloads);
    bool is_downloads_Set() const;
    bool is_downloads_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIVersionPackageInfo_javaVersion getJavaVersion() const;
    void setJavaVersion(const OAIVersionPackageInfo_javaVersion &java_version);
    bool is_java_version_Set() const;
    bool is_java_version_Valid() const;

    QString getMainClass() const;
    void setMainClass(const QString &main_class);
    bool is_main_class_Set() const;
    bool is_main_class_Valid() const;

    qint32 getMinimumLauncherVersion() const;
    void setMinimumLauncherVersion(const qint32 &minimum_launcher_version);
    bool is_minimum_launcher_version_Set() const;
    bool is_minimum_launcher_version_Valid() const;

    QDateTime getTime() const;
    void setTime(const QDateTime &time);
    bool is_time_Set() const;
    bool is_time_Valid() const;

    QDateTime getReleaseTime() const;
    void setReleaseTime(const QDateTime &release_time);
    bool is_release_time_Set() const;
    bool is_release_time_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString version;
    bool m_version_isSet;
    bool m_version_isValid;

    OAIVersionPackageInfo_assetIndex asset_index;
    bool m_asset_index_isSet;
    bool m_asset_index_isValid;

    QString assets;
    bool m_assets_isSet;
    bool m_assets_isValid;

    qint32 compliance_level;
    bool m_compliance_level_isSet;
    bool m_compliance_level_isValid;

    OAIVersionPackageInfo_downloads downloads;
    bool m_downloads_isSet;
    bool m_downloads_isValid;

    QString id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIVersionPackageInfo_javaVersion java_version;
    bool m_java_version_isSet;
    bool m_java_version_isValid;

    QString main_class;
    bool m_main_class_isSet;
    bool m_main_class_isValid;

    qint32 minimum_launcher_version;
    bool m_minimum_launcher_version_isSet;
    bool m_minimum_launcher_version_isValid;

    QDateTime time;
    bool m_time_isSet;
    bool m_time_isValid;

    QDateTime release_time;
    bool m_release_time_isSet;
    bool m_release_time_isValid;

    QString type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVersionPackageInfo)

#endif // OAIVersionPackageInfo_H
