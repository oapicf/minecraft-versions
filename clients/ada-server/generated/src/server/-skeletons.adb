--  
--  SDK for Minecraft versions info
--
--  The version of the OpenAPI document: 0.9.0_pre.0
--  Contact: blah+oapicf@cliffano.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.6.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is
   pragma Style_Checks ("-bmrIu");
   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   Media_List_1 : aliased constant Swagger.Mime_List := (
     1 => Swagger.Mime_Json);

   package body Skeleton is


      package API_Get_Minecraft_Version_Manifest is
         new Swagger.Servers.Operation
            (Handler => Get_Minecraft_Version_Manifest,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/mc/game/version_manifest.json",
             Mimes   => Media_List_1'Access);

      --  Get Minecraft version manifest
      procedure Get_Minecraft_Version_Manifest
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.VersionManifest_Type;
      begin
         
         
         Impl.Get_Minecraft_Version_Manifest (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("A list of Minecraft versions with the latest and snapshot releases");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Get_Minecraft_Version_Manifest;

      package API_Get_Minecraft_Version_Package_Info is
         new Swagger.Servers.Operation
            (Handler => Get_Minecraft_Version_Package_Info,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/v1/packages/{packageId}/{versionId}.json",
             Mimes   => Media_List_1'Access);

      --  Get Minecraft version package info
      procedure Get_Minecraft_Version_Package_Info
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Package_Id : Swagger.UString;
         Version_Id : Swagger.UString;
         Result : .Models.VersionPackageInfo_Type;
      begin
         
         
         Package_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Version_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Get_Minecraft_Version_Package_Info
            (Package_Id,
             Version_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Get package version details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Get_Minecraft_Version_Package_Info;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Get_Minecraft_Version_Manifest.Definition);
         Swagger.Servers.Register (Server, API_Get_Minecraft_Version_Package_Info.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  Get Minecraft version manifest
      procedure Get_Minecraft_Version_Manifest
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.VersionManifest_Type;
      begin

         
         Server.Get_Minecraft_Version_Manifest (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("A list of Minecraft versions with the latest and snapshot releases");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Get_Minecraft_Version_Manifest;

      package API_Get_Minecraft_Version_Manifest is
         new Swagger.Servers.Operation
            (Handler => Get_Minecraft_Version_Manifest,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/mc/game/version_manifest.json",
             Mimes   => Media_List_1'Access);


      --  Get Minecraft version package info
      procedure Get_Minecraft_Version_Package_Info
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Package_Id : Swagger.UString;
         Version_Id : Swagger.UString;
         Result : .Models.VersionPackageInfo_Type;
      begin

         
         Package_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Version_Id := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Get_Minecraft_Version_Package_Info
            (Package_Id,
             Version_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Get package version details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Get_Minecraft_Version_Package_Info;

      package API_Get_Minecraft_Version_Package_Info is
         new Swagger.Servers.Operation
            (Handler => Get_Minecraft_Version_Package_Info,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/v1/packages/{packageId}/{versionId}.json",
             Mimes   => Media_List_1'Access);


      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Get_Minecraft_Version_Manifest.Definition);
         Swagger.Servers.Register (Server, API_Get_Minecraft_Version_Package_Info.Definition);
      end Register;

      protected body Server is
         --  Get Minecraft version manifest
         procedure Get_Minecraft_Version_Manifest (Result : out .Models.VersionManifest_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Minecraft_Version_Manifest (Result, Context);
         end Get_Minecraft_Version_Manifest;

         --  Get Minecraft version package info
         procedure Get_Minecraft_Version_Package_Info
            (Package_Id : in Swagger.UString;
             Version_Id : in Swagger.UString;
             Result : out .Models.VersionPackageInfo_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Minecraft_Version_Package_Info
               (Package_Id,
                Version_Id,
                Result,
                Context);
         end Get_Minecraft_Version_Package_Info;

      end Server;

   end Shared_Instance;

end .Skeletons;
