/*
 * SDK for Minecraft versions info
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads : IEquatable<V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads>
    {
        /// <summary>
        /// Gets or Sets VarClient
        /// </summary>
        [DataMember(Name="client", EmitDefaultValue=false)]
        public V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient VarClient { get; set; }

        /// <summary>
        /// Gets or Sets ClientMappings
        /// </summary>
        [DataMember(Name="client_mappings", EmitDefaultValue=false)]
        public V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient ClientMappings { get; set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [DataMember(Name="server", EmitDefaultValue=false)]
        public V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient Server { get; set; }

        /// <summary>
        /// Gets or Sets ServerMappings
        /// </summary>
        [DataMember(Name="server_mappings", EmitDefaultValue=false)]
        public V1PackagesPackageIdVersionIdJsonGet200ResponseDownloadsClient ServerMappings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads {\n");
            sb.Append("  VarClient: ").Append(VarClient).Append("\n");
            sb.Append("  ClientMappings: ").Append(ClientMappings).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  ServerMappings: ").Append(ServerMappings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads)obj);
        }

        /// <summary>
        /// Returns true if V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads instances are equal
        /// </summary>
        /// <param name="other">Instance of V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VarClient == other.VarClient ||
                    VarClient != null &&
                    VarClient.Equals(other.VarClient)
                ) && 
                (
                    ClientMappings == other.ClientMappings ||
                    ClientMappings != null &&
                    ClientMappings.Equals(other.ClientMappings)
                ) && 
                (
                    Server == other.Server ||
                    Server != null &&
                    Server.Equals(other.Server)
                ) && 
                (
                    ServerMappings == other.ServerMappings ||
                    ServerMappings != null &&
                    ServerMappings.Equals(other.ServerMappings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VarClient != null)
                    hashCode = hashCode * 59 + VarClient.GetHashCode();
                    if (ClientMappings != null)
                    hashCode = hashCode * 59 + ClientMappings.GetHashCode();
                    if (Server != null)
                    hashCode = hashCode * 59 + Server.GetHashCode();
                    if (ServerMappings != null)
                    hashCode = hashCode * 59 + ServerMappings.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads left, V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads left, V1PackagesPackageIdVersionIdJsonGet200ResponseDownloads right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
