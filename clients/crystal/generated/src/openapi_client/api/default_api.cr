# #SDK for Minecraft versions info
#
#The version of the OpenAPI document: 0.9.0-pre.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.6.0
#

require "uri"

module OpenAPIClient
  class DefaultApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Minecraft version manifest
    # @return [VersionManifest]
    def get_minecraft_version_manifest()
      data, _status_code, _headers = get_minecraft_version_manifest_with_http_info()
      data
    end

    # Get Minecraft version manifest
    # @return [Array<(VersionManifest, Integer, Hash)>] VersionManifest data, response status code and response headers
    def get_minecraft_version_manifest_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.get_minecraft_version_manifest ..."}
      end
      # resource path
      local_var_path = "/mc/game/version_manifest.json"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "VersionManifest"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.get_minecraft_version_manifest",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#get_minecraft_version_manifest\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return VersionManifest.from_json(data), status_code, headers
    end

    # Get Minecraft version package info
    # @param package_id [String] 
    # @param version_id [String] 
    # @return [VersionPackageInfo]
    def get_minecraft_version_package_info(package_id : String, version_id : String)
      data, _status_code, _headers = get_minecraft_version_package_info_with_http_info(package_id, version_id)
      data
    end

    # Get Minecraft version package info
    # @param package_id [String] 
    # @param version_id [String] 
    # @return [Array<(VersionPackageInfo, Integer, Hash)>] VersionPackageInfo data, response status code and response headers
    def get_minecraft_version_package_info_with_http_info(package_id : String, version_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.get_minecraft_version_package_info ..."}
      end
      # verify the required parameter "package_id" is set
      if @api_client.config.client_side_validation && package_id.nil?
        raise ArgumentError.new("Missing the required parameter 'package_id' when calling DefaultApi.get_minecraft_version_package_info")
      end
      # verify the required parameter "version_id" is set
      if @api_client.config.client_side_validation && version_id.nil?
        raise ArgumentError.new("Missing the required parameter 'version_id' when calling DefaultApi.get_minecraft_version_package_info")
      end
      # resource path
      local_var_path = "/v1/packages/{packageId}/{versionId}.json".sub("{" + "packageId" + "}", URI.encode_path(package_id.to_s)).sub("{" + "versionId" + "}", URI.encode_path(version_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "VersionPackageInfo"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.get_minecraft_version_package_info",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#get_minecraft_version_package_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return VersionPackageInfo.from_json(data), status_code, headers
    end
  end
end
