from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.version_package_info_asset_index import VersionPackageInfoAssetIndex
from openapi_server.models.version_package_info_downloads import VersionPackageInfoDownloads
from openapi_server.models.version_package_info_java_version import VersionPackageInfoJavaVersion
from openapi_server import util

from openapi_server.models.version_package_info_asset_index import VersionPackageInfoAssetIndex  # noqa: E501
from openapi_server.models.version_package_info_downloads import VersionPackageInfoDownloads  # noqa: E501
from openapi_server.models.version_package_info_java_version import VersionPackageInfoJavaVersion  # noqa: E501

class VersionPackageInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version=None, asset_index=None, assets=None, compliance_level=None, downloads=None, id=None, java_version=None, main_class=None, minimum_launcher_version=None, time=None, release_time=None, type=None):  # noqa: E501
        """VersionPackageInfo - a model defined in OpenAPI

        :param version: The version of this VersionPackageInfo.  # noqa: E501
        :type version: str
        :param asset_index: The asset_index of this VersionPackageInfo.  # noqa: E501
        :type asset_index: VersionPackageInfoAssetIndex
        :param assets: The assets of this VersionPackageInfo.  # noqa: E501
        :type assets: str
        :param compliance_level: The compliance_level of this VersionPackageInfo.  # noqa: E501
        :type compliance_level: int
        :param downloads: The downloads of this VersionPackageInfo.  # noqa: E501
        :type downloads: VersionPackageInfoDownloads
        :param id: The id of this VersionPackageInfo.  # noqa: E501
        :type id: str
        :param java_version: The java_version of this VersionPackageInfo.  # noqa: E501
        :type java_version: VersionPackageInfoJavaVersion
        :param main_class: The main_class of this VersionPackageInfo.  # noqa: E501
        :type main_class: str
        :param minimum_launcher_version: The minimum_launcher_version of this VersionPackageInfo.  # noqa: E501
        :type minimum_launcher_version: int
        :param time: The time of this VersionPackageInfo.  # noqa: E501
        :type time: datetime
        :param release_time: The release_time of this VersionPackageInfo.  # noqa: E501
        :type release_time: datetime
        :param type: The type of this VersionPackageInfo.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'version': str,
            'asset_index': VersionPackageInfoAssetIndex,
            'assets': str,
            'compliance_level': int,
            'downloads': VersionPackageInfoDownloads,
            'id': str,
            'java_version': VersionPackageInfoJavaVersion,
            'main_class': str,
            'minimum_launcher_version': int,
            'time': datetime,
            'release_time': datetime,
            'type': str
        }

        self.attribute_map = {
            'version': 'version',
            'asset_index': 'assetIndex',
            'assets': 'assets',
            'compliance_level': 'complianceLevel',
            'downloads': 'downloads',
            'id': 'id',
            'java_version': 'javaVersion',
            'main_class': 'mainClass',
            'minimum_launcher_version': 'minimumLauncherVersion',
            'time': 'time',
            'release_time': 'releaseTime',
            'type': 'type'
        }

        self._version = version
        self._asset_index = asset_index
        self._assets = assets
        self._compliance_level = compliance_level
        self._downloads = downloads
        self._id = id
        self._java_version = java_version
        self._main_class = main_class
        self._minimum_launcher_version = minimum_launcher_version
        self._time = time
        self._release_time = release_time
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'VersionPackageInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VersionPackageInfo of this VersionPackageInfo.  # noqa: E501
        :rtype: VersionPackageInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self) -> str:
        """Gets the version of this VersionPackageInfo.


        :return: The version of this VersionPackageInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this VersionPackageInfo.


        :param version: The version of this VersionPackageInfo.
        :type version: str
        """

        self._version = version

    @property
    def asset_index(self) -> VersionPackageInfoAssetIndex:
        """Gets the asset_index of this VersionPackageInfo.


        :return: The asset_index of this VersionPackageInfo.
        :rtype: VersionPackageInfoAssetIndex
        """
        return self._asset_index

    @asset_index.setter
    def asset_index(self, asset_index: VersionPackageInfoAssetIndex):
        """Sets the asset_index of this VersionPackageInfo.


        :param asset_index: The asset_index of this VersionPackageInfo.
        :type asset_index: VersionPackageInfoAssetIndex
        """

        self._asset_index = asset_index

    @property
    def assets(self) -> str:
        """Gets the assets of this VersionPackageInfo.


        :return: The assets of this VersionPackageInfo.
        :rtype: str
        """
        return self._assets

    @assets.setter
    def assets(self, assets: str):
        """Sets the assets of this VersionPackageInfo.


        :param assets: The assets of this VersionPackageInfo.
        :type assets: str
        """

        self._assets = assets

    @property
    def compliance_level(self) -> int:
        """Gets the compliance_level of this VersionPackageInfo.


        :return: The compliance_level of this VersionPackageInfo.
        :rtype: int
        """
        return self._compliance_level

    @compliance_level.setter
    def compliance_level(self, compliance_level: int):
        """Sets the compliance_level of this VersionPackageInfo.


        :param compliance_level: The compliance_level of this VersionPackageInfo.
        :type compliance_level: int
        """

        self._compliance_level = compliance_level

    @property
    def downloads(self) -> VersionPackageInfoDownloads:
        """Gets the downloads of this VersionPackageInfo.


        :return: The downloads of this VersionPackageInfo.
        :rtype: VersionPackageInfoDownloads
        """
        return self._downloads

    @downloads.setter
    def downloads(self, downloads: VersionPackageInfoDownloads):
        """Sets the downloads of this VersionPackageInfo.


        :param downloads: The downloads of this VersionPackageInfo.
        :type downloads: VersionPackageInfoDownloads
        """

        self._downloads = downloads

    @property
    def id(self) -> str:
        """Gets the id of this VersionPackageInfo.


        :return: The id of this VersionPackageInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this VersionPackageInfo.


        :param id: The id of this VersionPackageInfo.
        :type id: str
        """

        self._id = id

    @property
    def java_version(self) -> VersionPackageInfoJavaVersion:
        """Gets the java_version of this VersionPackageInfo.


        :return: The java_version of this VersionPackageInfo.
        :rtype: VersionPackageInfoJavaVersion
        """
        return self._java_version

    @java_version.setter
    def java_version(self, java_version: VersionPackageInfoJavaVersion):
        """Sets the java_version of this VersionPackageInfo.


        :param java_version: The java_version of this VersionPackageInfo.
        :type java_version: VersionPackageInfoJavaVersion
        """

        self._java_version = java_version

    @property
    def main_class(self) -> str:
        """Gets the main_class of this VersionPackageInfo.


        :return: The main_class of this VersionPackageInfo.
        :rtype: str
        """
        return self._main_class

    @main_class.setter
    def main_class(self, main_class: str):
        """Sets the main_class of this VersionPackageInfo.


        :param main_class: The main_class of this VersionPackageInfo.
        :type main_class: str
        """

        self._main_class = main_class

    @property
    def minimum_launcher_version(self) -> int:
        """Gets the minimum_launcher_version of this VersionPackageInfo.


        :return: The minimum_launcher_version of this VersionPackageInfo.
        :rtype: int
        """
        return self._minimum_launcher_version

    @minimum_launcher_version.setter
    def minimum_launcher_version(self, minimum_launcher_version: int):
        """Sets the minimum_launcher_version of this VersionPackageInfo.


        :param minimum_launcher_version: The minimum_launcher_version of this VersionPackageInfo.
        :type minimum_launcher_version: int
        """

        self._minimum_launcher_version = minimum_launcher_version

    @property
    def time(self) -> datetime:
        """Gets the time of this VersionPackageInfo.


        :return: The time of this VersionPackageInfo.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this VersionPackageInfo.


        :param time: The time of this VersionPackageInfo.
        :type time: datetime
        """

        self._time = time

    @property
    def release_time(self) -> datetime:
        """Gets the release_time of this VersionPackageInfo.


        :return: The release_time of this VersionPackageInfo.
        :rtype: datetime
        """
        return self._release_time

    @release_time.setter
    def release_time(self, release_time: datetime):
        """Sets the release_time of this VersionPackageInfo.


        :param release_time: The release_time of this VersionPackageInfo.
        :type release_time: datetime
        """

        self._release_time = release_time

    @property
    def type(self) -> str:
        """Gets the type of this VersionPackageInfo.


        :return: The type of this VersionPackageInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this VersionPackageInfo.


        :param type: The type of this VersionPackageInfo.
        :type type: str
        """

        self._type = type
