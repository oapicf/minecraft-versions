/**
* 
* SDK for Minecraft versions info
*
* The version of the OpenAPI document: 0.9.0-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "_v1_packages__packageId___versionId__json_get_200_response_javaVersion.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

_v1_packages__packageId___versionId__json_get_200_response_javaVersion::_v1_packages__packageId___versionId__json_get_200_response_javaVersion()
{
    m_Component = "";
    m_ComponentIsSet = false;
    m_MajorVersion = 0;
    m_MajorVersionIsSet = false;
    
}

void _v1_packages__packageId___versionId__json_get_200_response_javaVersion::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool _v1_packages__packageId___versionId__json_get_200_response_javaVersion::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool _v1_packages__packageId___versionId__json_get_200_response_javaVersion::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "_v1_packages__packageId___versionId__json_get_200_response_javaVersion" : pathPrefix;

            
    return success;
}

bool _v1_packages__packageId___versionId__json_get_200_response_javaVersion::operator==(const _v1_packages__packageId___versionId__json_get_200_response_javaVersion& rhs) const
{
    return
    
    
    
    ((!componentIsSet() && !rhs.componentIsSet()) || (componentIsSet() && rhs.componentIsSet() && getComponent() == rhs.getComponent())) &&
    
    
    ((!majorVersionIsSet() && !rhs.majorVersionIsSet()) || (majorVersionIsSet() && rhs.majorVersionIsSet() && getMajorVersion() == rhs.getMajorVersion()))
    
    ;
}

bool _v1_packages__packageId___versionId__json_get_200_response_javaVersion::operator!=(const _v1_packages__packageId___versionId__json_get_200_response_javaVersion& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const _v1_packages__packageId___versionId__json_get_200_response_javaVersion& o)
{
    j = nlohmann::json::object();
    if(o.componentIsSet())
        j["component"] = o.m_Component;
    if(o.majorVersionIsSet())
        j["majorVersion"] = o.m_MajorVersion;
    
}

void from_json(const nlohmann::json& j, _v1_packages__packageId___versionId__json_get_200_response_javaVersion& o)
{
    if(j.find("component") != j.end())
    {
        j.at("component").get_to(o.m_Component);
        o.m_ComponentIsSet = true;
    } 
    if(j.find("majorVersion") != j.end())
    {
        j.at("majorVersion").get_to(o.m_MajorVersion);
        o.m_MajorVersionIsSet = true;
    } 
    
}

std::string _v1_packages__packageId___versionId__json_get_200_response_javaVersion::getComponent() const
{
    return m_Component;
}
void _v1_packages__packageId___versionId__json_get_200_response_javaVersion::setComponent(std::string const& value)
{
    m_Component = value;
    m_ComponentIsSet = true;
}
bool _v1_packages__packageId___versionId__json_get_200_response_javaVersion::componentIsSet() const
{
    return m_ComponentIsSet;
}
void _v1_packages__packageId___versionId__json_get_200_response_javaVersion::unsetComponent()
{
    m_ComponentIsSet = false;
}
int32_t _v1_packages__packageId___versionId__json_get_200_response_javaVersion::getMajorVersion() const
{
    return m_MajorVersion;
}
void _v1_packages__packageId___versionId__json_get_200_response_javaVersion::setMajorVersion(int32_t const value)
{
    m_MajorVersion = value;
    m_MajorVersionIsSet = true;
}
bool _v1_packages__packageId___versionId__json_get_200_response_javaVersion::majorVersionIsSet() const
{
    return m_MajorVersionIsSet;
}
void _v1_packages__packageId___versionId__json_get_200_response_javaVersion::unsetMajorVersion()
{
    m_MajorVersionIsSet = false;
}


} // namespace org::openapitools::server::model

