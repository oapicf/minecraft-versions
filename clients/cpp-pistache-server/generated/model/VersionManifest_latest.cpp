/**
* 
* SDK for Minecraft versions info
*
* The version of the OpenAPI document: 0.9.0-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "VersionManifest_latest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

VersionManifest_latest::VersionManifest_latest()
{
    m_Release = "";
    m_ReleaseIsSet = false;
    m_Snapshot = "";
    m_SnapshotIsSet = false;
    
}

void VersionManifest_latest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool VersionManifest_latest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool VersionManifest_latest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "VersionManifest_latest" : pathPrefix;

            
    return success;
}

bool VersionManifest_latest::operator==(const VersionManifest_latest& rhs) const
{
    return
    
    
    
    ((!releaseIsSet() && !rhs.releaseIsSet()) || (releaseIsSet() && rhs.releaseIsSet() && getRelease() == rhs.getRelease())) &&
    
    
    ((!snapshotIsSet() && !rhs.snapshotIsSet()) || (snapshotIsSet() && rhs.snapshotIsSet() && getSnapshot() == rhs.getSnapshot()))
    
    ;
}

bool VersionManifest_latest::operator!=(const VersionManifest_latest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const VersionManifest_latest& o)
{
    j = nlohmann::json::object();
    if(o.releaseIsSet())
        j["release"] = o.m_Release;
    if(o.snapshotIsSet())
        j["snapshot"] = o.m_Snapshot;
    
}

void from_json(const nlohmann::json& j, VersionManifest_latest& o)
{
    if(j.find("release") != j.end())
    {
        j.at("release").get_to(o.m_Release);
        o.m_ReleaseIsSet = true;
    } 
    if(j.find("snapshot") != j.end())
    {
        j.at("snapshot").get_to(o.m_Snapshot);
        o.m_SnapshotIsSet = true;
    } 
    
}

std::string VersionManifest_latest::getRelease() const
{
    return m_Release;
}
void VersionManifest_latest::setRelease(std::string const& value)
{
    m_Release = value;
    m_ReleaseIsSet = true;
}
bool VersionManifest_latest::releaseIsSet() const
{
    return m_ReleaseIsSet;
}
void VersionManifest_latest::unsetRelease()
{
    m_ReleaseIsSet = false;
}
std::string VersionManifest_latest::getSnapshot() const
{
    return m_Snapshot;
}
void VersionManifest_latest::setSnapshot(std::string const& value)
{
    m_Snapshot = value;
    m_SnapshotIsSet = true;
}
bool VersionManifest_latest::snapshotIsSet() const
{
    return m_SnapshotIsSet;
}
void VersionManifest_latest::unsetSnapshot()
{
    m_SnapshotIsSet = false;
}


} // namespace org::openapitools::server::model

