/**
* 
* SDK for Minecraft versions info
*
* The version of the OpenAPI document: 1.1.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "VersionPackageInfo_assetIndex.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

VersionPackageInfo_assetIndex::VersionPackageInfo_assetIndex()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Sha1 = "";
    m_Sha1IsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    m_TotalSize = 0;
    m_TotalSizeIsSet = false;
    m_Url = "";
    m_UrlIsSet = false;
    
}

void VersionPackageInfo_assetIndex::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool VersionPackageInfo_assetIndex::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool VersionPackageInfo_assetIndex::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "VersionPackageInfo_assetIndex" : pathPrefix;

                        
    return success;
}

bool VersionPackageInfo_assetIndex::operator==(const VersionPackageInfo_assetIndex& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!sha1IsSet() && !rhs.sha1IsSet()) || (sha1IsSet() && rhs.sha1IsSet() && getSha1() == rhs.getSha1())) &&
    
    
    ((!sizeIsSet() && !rhs.sizeIsSet()) || (sizeIsSet() && rhs.sizeIsSet() && getSize() == rhs.getSize())) &&
    
    
    ((!totalSizeIsSet() && !rhs.totalSizeIsSet()) || (totalSizeIsSet() && rhs.totalSizeIsSet() && getTotalSize() == rhs.getTotalSize())) &&
    
    
    ((!urlIsSet() && !rhs.urlIsSet()) || (urlIsSet() && rhs.urlIsSet() && getUrl() == rhs.getUrl()))
    
    ;
}

bool VersionPackageInfo_assetIndex::operator!=(const VersionPackageInfo_assetIndex& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const VersionPackageInfo_assetIndex& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.sha1IsSet())
        j["sha1"] = o.m_Sha1;
    if(o.sizeIsSet())
        j["size"] = o.m_Size;
    if(o.totalSizeIsSet())
        j["totalSize"] = o.m_TotalSize;
    if(o.urlIsSet())
        j["url"] = o.m_Url;
    
}

void from_json(const nlohmann::json& j, VersionPackageInfo_assetIndex& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("sha1") != j.end())
    {
        j.at("sha1").get_to(o.m_Sha1);
        o.m_Sha1IsSet = true;
    } 
    if(j.find("size") != j.end())
    {
        j.at("size").get_to(o.m_Size);
        o.m_SizeIsSet = true;
    } 
    if(j.find("totalSize") != j.end())
    {
        j.at("totalSize").get_to(o.m_TotalSize);
        o.m_TotalSizeIsSet = true;
    } 
    if(j.find("url") != j.end())
    {
        j.at("url").get_to(o.m_Url);
        o.m_UrlIsSet = true;
    } 
    
}

std::string VersionPackageInfo_assetIndex::getId() const
{
    return m_Id;
}
void VersionPackageInfo_assetIndex::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool VersionPackageInfo_assetIndex::idIsSet() const
{
    return m_IdIsSet;
}
void VersionPackageInfo_assetIndex::unsetId()
{
    m_IdIsSet = false;
}
std::string VersionPackageInfo_assetIndex::getSha1() const
{
    return m_Sha1;
}
void VersionPackageInfo_assetIndex::setSha1(std::string const& value)
{
    m_Sha1 = value;
    m_Sha1IsSet = true;
}
bool VersionPackageInfo_assetIndex::sha1IsSet() const
{
    return m_Sha1IsSet;
}
void VersionPackageInfo_assetIndex::unsetSha1()
{
    m_Sha1IsSet = false;
}
int32_t VersionPackageInfo_assetIndex::getSize() const
{
    return m_Size;
}
void VersionPackageInfo_assetIndex::setSize(int32_t const value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool VersionPackageInfo_assetIndex::sizeIsSet() const
{
    return m_SizeIsSet;
}
void VersionPackageInfo_assetIndex::unsetSize()
{
    m_SizeIsSet = false;
}
int32_t VersionPackageInfo_assetIndex::getTotalSize() const
{
    return m_TotalSize;
}
void VersionPackageInfo_assetIndex::setTotalSize(int32_t const value)
{
    m_TotalSize = value;
    m_TotalSizeIsSet = true;
}
bool VersionPackageInfo_assetIndex::totalSizeIsSet() const
{
    return m_TotalSizeIsSet;
}
void VersionPackageInfo_assetIndex::unsetTotalSize()
{
    m_TotalSizeIsSet = false;
}
std::string VersionPackageInfo_assetIndex::getUrl() const
{
    return m_Url;
}
void VersionPackageInfo_assetIndex::setUrl(std::string const& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool VersionPackageInfo_assetIndex::urlIsSet() const
{
    return m_UrlIsSet;
}
void VersionPackageInfo_assetIndex::unsetUrl()
{
    m_UrlIsSet = false;
}


} // namespace org::openapitools::server::model

