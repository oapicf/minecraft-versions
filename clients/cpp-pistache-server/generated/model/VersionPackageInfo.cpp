/**
* 
* SDK for Minecraft versions info
*
* The version of the OpenAPI document: 0.9.0-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "VersionPackageInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

VersionPackageInfo::VersionPackageInfo()
{
    m_Version = "";
    m_VersionIsSet = false;
    m_AssetIndexIsSet = false;
    m_Assets = "";
    m_AssetsIsSet = false;
    m_ComplianceLevel = 0;
    m_ComplianceLevelIsSet = false;
    m_DownloadsIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_JavaVersionIsSet = false;
    m_MainClass = "";
    m_MainClassIsSet = false;
    m_MinimumLauncherVersion = 0;
    m_MinimumLauncherVersionIsSet = false;
    m_Time = "";
    m_TimeIsSet = false;
    m_ReleaseTime = "";
    m_ReleaseTimeIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    
}

void VersionPackageInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool VersionPackageInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool VersionPackageInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "VersionPackageInfo" : pathPrefix;

                                                    
    return success;
}

bool VersionPackageInfo::operator==(const VersionPackageInfo& rhs) const
{
    return
    
    
    
    ((!versionIsSet() && !rhs.versionIsSet()) || (versionIsSet() && rhs.versionIsSet() && getVersion() == rhs.getVersion())) &&
    
    
    ((!assetIndexIsSet() && !rhs.assetIndexIsSet()) || (assetIndexIsSet() && rhs.assetIndexIsSet() && getAssetIndex() == rhs.getAssetIndex())) &&
    
    
    ((!assetsIsSet() && !rhs.assetsIsSet()) || (assetsIsSet() && rhs.assetsIsSet() && getAssets() == rhs.getAssets())) &&
    
    
    ((!complianceLevelIsSet() && !rhs.complianceLevelIsSet()) || (complianceLevelIsSet() && rhs.complianceLevelIsSet() && getComplianceLevel() == rhs.getComplianceLevel())) &&
    
    
    ((!downloadsIsSet() && !rhs.downloadsIsSet()) || (downloadsIsSet() && rhs.downloadsIsSet() && getDownloads() == rhs.getDownloads())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!javaVersionIsSet() && !rhs.javaVersionIsSet()) || (javaVersionIsSet() && rhs.javaVersionIsSet() && getJavaVersion() == rhs.getJavaVersion())) &&
    
    
    ((!mainClassIsSet() && !rhs.mainClassIsSet()) || (mainClassIsSet() && rhs.mainClassIsSet() && getMainClass() == rhs.getMainClass())) &&
    
    
    ((!minimumLauncherVersionIsSet() && !rhs.minimumLauncherVersionIsSet()) || (minimumLauncherVersionIsSet() && rhs.minimumLauncherVersionIsSet() && getMinimumLauncherVersion() == rhs.getMinimumLauncherVersion())) &&
    
    
    ((!timeIsSet() && !rhs.timeIsSet()) || (timeIsSet() && rhs.timeIsSet() && getTime() == rhs.getTime())) &&
    
    
    ((!releaseTimeIsSet() && !rhs.releaseTimeIsSet()) || (releaseTimeIsSet() && rhs.releaseTimeIsSet() && getReleaseTime() == rhs.getReleaseTime())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType()))
    
    ;
}

bool VersionPackageInfo::operator!=(const VersionPackageInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const VersionPackageInfo& o)
{
    j = nlohmann::json::object();
    if(o.versionIsSet())
        j["version"] = o.m_Version;
    if(o.assetIndexIsSet())
        j["assetIndex"] = o.m_AssetIndex;
    if(o.assetsIsSet())
        j["assets"] = o.m_Assets;
    if(o.complianceLevelIsSet())
        j["complianceLevel"] = o.m_ComplianceLevel;
    if(o.downloadsIsSet())
        j["downloads"] = o.m_Downloads;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.javaVersionIsSet())
        j["javaVersion"] = o.m_JavaVersion;
    if(o.mainClassIsSet())
        j["mainClass"] = o.m_MainClass;
    if(o.minimumLauncherVersionIsSet())
        j["minimumLauncherVersion"] = o.m_MinimumLauncherVersion;
    if(o.timeIsSet())
        j["time"] = o.m_Time;
    if(o.releaseTimeIsSet())
        j["releaseTime"] = o.m_ReleaseTime;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    
}

void from_json(const nlohmann::json& j, VersionPackageInfo& o)
{
    if(j.find("version") != j.end())
    {
        j.at("version").get_to(o.m_Version);
        o.m_VersionIsSet = true;
    } 
    if(j.find("assetIndex") != j.end())
    {
        j.at("assetIndex").get_to(o.m_AssetIndex);
        o.m_AssetIndexIsSet = true;
    } 
    if(j.find("assets") != j.end())
    {
        j.at("assets").get_to(o.m_Assets);
        o.m_AssetsIsSet = true;
    } 
    if(j.find("complianceLevel") != j.end())
    {
        j.at("complianceLevel").get_to(o.m_ComplianceLevel);
        o.m_ComplianceLevelIsSet = true;
    } 
    if(j.find("downloads") != j.end())
    {
        j.at("downloads").get_to(o.m_Downloads);
        o.m_DownloadsIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("javaVersion") != j.end())
    {
        j.at("javaVersion").get_to(o.m_JavaVersion);
        o.m_JavaVersionIsSet = true;
    } 
    if(j.find("mainClass") != j.end())
    {
        j.at("mainClass").get_to(o.m_MainClass);
        o.m_MainClassIsSet = true;
    } 
    if(j.find("minimumLauncherVersion") != j.end())
    {
        j.at("minimumLauncherVersion").get_to(o.m_MinimumLauncherVersion);
        o.m_MinimumLauncherVersionIsSet = true;
    } 
    if(j.find("time") != j.end())
    {
        j.at("time").get_to(o.m_Time);
        o.m_TimeIsSet = true;
    } 
    if(j.find("releaseTime") != j.end())
    {
        j.at("releaseTime").get_to(o.m_ReleaseTime);
        o.m_ReleaseTimeIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    
}

std::string VersionPackageInfo::getVersion() const
{
    return m_Version;
}
void VersionPackageInfo::setVersion(std::string const& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}
bool VersionPackageInfo::versionIsSet() const
{
    return m_VersionIsSet;
}
void VersionPackageInfo::unsetVersion()
{
    m_VersionIsSet = false;
}
org::openapitools::server::model::VersionPackageInfo_assetIndex VersionPackageInfo::getAssetIndex() const
{
    return m_AssetIndex;
}
void VersionPackageInfo::setAssetIndex(org::openapitools::server::model::VersionPackageInfo_assetIndex const& value)
{
    m_AssetIndex = value;
    m_AssetIndexIsSet = true;
}
bool VersionPackageInfo::assetIndexIsSet() const
{
    return m_AssetIndexIsSet;
}
void VersionPackageInfo::unsetAssetIndex()
{
    m_AssetIndexIsSet = false;
}
std::string VersionPackageInfo::getAssets() const
{
    return m_Assets;
}
void VersionPackageInfo::setAssets(std::string const& value)
{
    m_Assets = value;
    m_AssetsIsSet = true;
}
bool VersionPackageInfo::assetsIsSet() const
{
    return m_AssetsIsSet;
}
void VersionPackageInfo::unsetAssets()
{
    m_AssetsIsSet = false;
}
int32_t VersionPackageInfo::getComplianceLevel() const
{
    return m_ComplianceLevel;
}
void VersionPackageInfo::setComplianceLevel(int32_t const value)
{
    m_ComplianceLevel = value;
    m_ComplianceLevelIsSet = true;
}
bool VersionPackageInfo::complianceLevelIsSet() const
{
    return m_ComplianceLevelIsSet;
}
void VersionPackageInfo::unsetComplianceLevel()
{
    m_ComplianceLevelIsSet = false;
}
org::openapitools::server::model::VersionPackageInfo_downloads VersionPackageInfo::getDownloads() const
{
    return m_Downloads;
}
void VersionPackageInfo::setDownloads(org::openapitools::server::model::VersionPackageInfo_downloads const& value)
{
    m_Downloads = value;
    m_DownloadsIsSet = true;
}
bool VersionPackageInfo::downloadsIsSet() const
{
    return m_DownloadsIsSet;
}
void VersionPackageInfo::unsetDownloads()
{
    m_DownloadsIsSet = false;
}
std::string VersionPackageInfo::getId() const
{
    return m_Id;
}
void VersionPackageInfo::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool VersionPackageInfo::idIsSet() const
{
    return m_IdIsSet;
}
void VersionPackageInfo::unsetId()
{
    m_IdIsSet = false;
}
org::openapitools::server::model::VersionPackageInfo_javaVersion VersionPackageInfo::getJavaVersion() const
{
    return m_JavaVersion;
}
void VersionPackageInfo::setJavaVersion(org::openapitools::server::model::VersionPackageInfo_javaVersion const& value)
{
    m_JavaVersion = value;
    m_JavaVersionIsSet = true;
}
bool VersionPackageInfo::javaVersionIsSet() const
{
    return m_JavaVersionIsSet;
}
void VersionPackageInfo::unsetJavaVersion()
{
    m_JavaVersionIsSet = false;
}
std::string VersionPackageInfo::getMainClass() const
{
    return m_MainClass;
}
void VersionPackageInfo::setMainClass(std::string const& value)
{
    m_MainClass = value;
    m_MainClassIsSet = true;
}
bool VersionPackageInfo::mainClassIsSet() const
{
    return m_MainClassIsSet;
}
void VersionPackageInfo::unsetMainClass()
{
    m_MainClassIsSet = false;
}
int32_t VersionPackageInfo::getMinimumLauncherVersion() const
{
    return m_MinimumLauncherVersion;
}
void VersionPackageInfo::setMinimumLauncherVersion(int32_t const value)
{
    m_MinimumLauncherVersion = value;
    m_MinimumLauncherVersionIsSet = true;
}
bool VersionPackageInfo::minimumLauncherVersionIsSet() const
{
    return m_MinimumLauncherVersionIsSet;
}
void VersionPackageInfo::unsetMinimumLauncherVersion()
{
    m_MinimumLauncherVersionIsSet = false;
}
std::string VersionPackageInfo::getTime() const
{
    return m_Time;
}
void VersionPackageInfo::setTime(std::string const& value)
{
    m_Time = value;
    m_TimeIsSet = true;
}
bool VersionPackageInfo::timeIsSet() const
{
    return m_TimeIsSet;
}
void VersionPackageInfo::unsetTime()
{
    m_TimeIsSet = false;
}
std::string VersionPackageInfo::getReleaseTime() const
{
    return m_ReleaseTime;
}
void VersionPackageInfo::setReleaseTime(std::string const& value)
{
    m_ReleaseTime = value;
    m_ReleaseTimeIsSet = true;
}
bool VersionPackageInfo::releaseTimeIsSet() const
{
    return m_ReleaseTimeIsSet;
}
void VersionPackageInfo::unsetReleaseTime()
{
    m_ReleaseTimeIsSet = false;
}
std::string VersionPackageInfo::getType() const
{
    return m_Type;
}
void VersionPackageInfo::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool VersionPackageInfo::typeIsSet() const
{
    return m_TypeIsSet;
}
void VersionPackageInfo::unsetType()
{
    m_TypeIsSet = false;
}


} // namespace org::openapitools::server::model

