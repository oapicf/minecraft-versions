/**
* 
* SDK for Minecraft versions info
*
* The version of the OpenAPI document: 1.1.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * VersionPackageInfo.h
 *
 * 
 */

#ifndef VersionPackageInfo_H_
#define VersionPackageInfo_H_


#include "VersionPackageInfo_javaVersion.h"
#include "VersionPackageInfo_assetIndex.h"
#include <string>
#include "VersionPackageInfo_downloads.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  VersionPackageInfo
{
public:
    VersionPackageInfo();
    virtual ~VersionPackageInfo() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const VersionPackageInfo& rhs) const;
    bool operator!=(const VersionPackageInfo& rhs) const;

    /////////////////////////////////////////////
    /// VersionPackageInfo members

    /// <summary>
    /// 
    /// </summary>
    std::string getVersion() const;
    void setVersion(std::string const& value);
    bool versionIsSet() const;
    void unsetVersion();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::VersionPackageInfo_assetIndex getAssetIndex() const;
    void setAssetIndex(org::openapitools::server::model::VersionPackageInfo_assetIndex const& value);
    bool assetIndexIsSet() const;
    void unsetAssetIndex();
    /// <summary>
    /// 
    /// </summary>
    std::string getAssets() const;
    void setAssets(std::string const& value);
    bool assetsIsSet() const;
    void unsetAssets();
    /// <summary>
    /// 
    /// </summary>
    int32_t getComplianceLevel() const;
    void setComplianceLevel(int32_t const value);
    bool complianceLevelIsSet() const;
    void unsetComplianceLevel();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::VersionPackageInfo_downloads getDownloads() const;
    void setDownloads(org::openapitools::server::model::VersionPackageInfo_downloads const& value);
    bool downloadsIsSet() const;
    void unsetDownloads();
    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::VersionPackageInfo_javaVersion getJavaVersion() const;
    void setJavaVersion(org::openapitools::server::model::VersionPackageInfo_javaVersion const& value);
    bool javaVersionIsSet() const;
    void unsetJavaVersion();
    /// <summary>
    /// 
    /// </summary>
    std::string getMainClass() const;
    void setMainClass(std::string const& value);
    bool mainClassIsSet() const;
    void unsetMainClass();
    /// <summary>
    /// 
    /// </summary>
    int32_t getMinimumLauncherVersion() const;
    void setMinimumLauncherVersion(int32_t const value);
    bool minimumLauncherVersionIsSet() const;
    void unsetMinimumLauncherVersion();
    /// <summary>
    /// 
    /// </summary>
    std::string getTime() const;
    void setTime(std::string const& value);
    bool timeIsSet() const;
    void unsetTime();
    /// <summary>
    /// 
    /// </summary>
    std::string getReleaseTime() const;
    void setReleaseTime(std::string const& value);
    bool releaseTimeIsSet() const;
    void unsetReleaseTime();
    /// <summary>
    /// 
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    bool typeIsSet() const;
    void unsetType();

    friend  void to_json(nlohmann::json& j, const VersionPackageInfo& o);
    friend  void from_json(const nlohmann::json& j, VersionPackageInfo& o);
protected:
    std::string m_Version;
    bool m_VersionIsSet;
    org::openapitools::server::model::VersionPackageInfo_assetIndex m_AssetIndex;
    bool m_AssetIndexIsSet;
    std::string m_Assets;
    bool m_AssetsIsSet;
    int32_t m_ComplianceLevel;
    bool m_ComplianceLevelIsSet;
    org::openapitools::server::model::VersionPackageInfo_downloads m_Downloads;
    bool m_DownloadsIsSet;
    std::string m_Id;
    bool m_IdIsSet;
    org::openapitools::server::model::VersionPackageInfo_javaVersion m_JavaVersion;
    bool m_JavaVersionIsSet;
    std::string m_MainClass;
    bool m_MainClassIsSet;
    int32_t m_MinimumLauncherVersion;
    bool m_MinimumLauncherVersionIsSet;
    std::string m_Time;
    bool m_TimeIsSet;
    std::string m_ReleaseTime;
    bool m_ReleaseTimeIsSet;
    std::string m_Type;
    bool m_TypeIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* VersionPackageInfo_H_ */
