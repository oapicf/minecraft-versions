/**
* 
* SDK for Minecraft versions info
*
* The version of the OpenAPI document: 0.9.0-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "_mc_game_version_manifest_get_200_response_versions_inner.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

_mc_game_version_manifest_get_200_response_versions_inner::_mc_game_version_manifest_get_200_response_versions_inner()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    m_Url = "";
    m_UrlIsSet = false;
    m_Time = "";
    m_TimeIsSet = false;
    m_ReleaseTime = "";
    m_ReleaseTimeIsSet = false;
    
}

void _mc_game_version_manifest_get_200_response_versions_inner::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool _mc_game_version_manifest_get_200_response_versions_inner::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool _mc_game_version_manifest_get_200_response_versions_inner::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "_mc_game_version_manifest_get_200_response_versions_inner" : pathPrefix;

                        
    return success;
}

bool _mc_game_version_manifest_get_200_response_versions_inner::operator==(const _mc_game_version_manifest_get_200_response_versions_inner& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!urlIsSet() && !rhs.urlIsSet()) || (urlIsSet() && rhs.urlIsSet() && getUrl() == rhs.getUrl())) &&
    
    
    ((!timeIsSet() && !rhs.timeIsSet()) || (timeIsSet() && rhs.timeIsSet() && getTime() == rhs.getTime())) &&
    
    
    ((!releaseTimeIsSet() && !rhs.releaseTimeIsSet()) || (releaseTimeIsSet() && rhs.releaseTimeIsSet() && getReleaseTime() == rhs.getReleaseTime()))
    
    ;
}

bool _mc_game_version_manifest_get_200_response_versions_inner::operator!=(const _mc_game_version_manifest_get_200_response_versions_inner& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const _mc_game_version_manifest_get_200_response_versions_inner& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.urlIsSet())
        j["url"] = o.m_Url;
    if(o.timeIsSet())
        j["time"] = o.m_Time;
    if(o.releaseTimeIsSet())
        j["releaseTime"] = o.m_ReleaseTime;
    
}

void from_json(const nlohmann::json& j, _mc_game_version_manifest_get_200_response_versions_inner& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("url") != j.end())
    {
        j.at("url").get_to(o.m_Url);
        o.m_UrlIsSet = true;
    } 
    if(j.find("time") != j.end())
    {
        j.at("time").get_to(o.m_Time);
        o.m_TimeIsSet = true;
    } 
    if(j.find("releaseTime") != j.end())
    {
        j.at("releaseTime").get_to(o.m_ReleaseTime);
        o.m_ReleaseTimeIsSet = true;
    } 
    
}

std::string _mc_game_version_manifest_get_200_response_versions_inner::getId() const
{
    return m_Id;
}
void _mc_game_version_manifest_get_200_response_versions_inner::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool _mc_game_version_manifest_get_200_response_versions_inner::idIsSet() const
{
    return m_IdIsSet;
}
void _mc_game_version_manifest_get_200_response_versions_inner::unsetId()
{
    m_IdIsSet = false;
}
std::string _mc_game_version_manifest_get_200_response_versions_inner::getType() const
{
    return m_Type;
}
void _mc_game_version_manifest_get_200_response_versions_inner::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool _mc_game_version_manifest_get_200_response_versions_inner::typeIsSet() const
{
    return m_TypeIsSet;
}
void _mc_game_version_manifest_get_200_response_versions_inner::unsetType()
{
    m_TypeIsSet = false;
}
std::string _mc_game_version_manifest_get_200_response_versions_inner::getUrl() const
{
    return m_Url;
}
void _mc_game_version_manifest_get_200_response_versions_inner::setUrl(std::string const& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool _mc_game_version_manifest_get_200_response_versions_inner::urlIsSet() const
{
    return m_UrlIsSet;
}
void _mc_game_version_manifest_get_200_response_versions_inner::unsetUrl()
{
    m_UrlIsSet = false;
}
std::string _mc_game_version_manifest_get_200_response_versions_inner::getTime() const
{
    return m_Time;
}
void _mc_game_version_manifest_get_200_response_versions_inner::setTime(std::string const& value)
{
    m_Time = value;
    m_TimeIsSet = true;
}
bool _mc_game_version_manifest_get_200_response_versions_inner::timeIsSet() const
{
    return m_TimeIsSet;
}
void _mc_game_version_manifest_get_200_response_versions_inner::unsetTime()
{
    m_TimeIsSet = false;
}
std::string _mc_game_version_manifest_get_200_response_versions_inner::getReleaseTime() const
{
    return m_ReleaseTime;
}
void _mc_game_version_manifest_get_200_response_versions_inner::setReleaseTime(std::string const& value)
{
    m_ReleaseTime = value;
    m_ReleaseTimeIsSet = true;
}
bool _mc_game_version_manifest_get_200_response_versions_inner::releaseTimeIsSet() const
{
    return m_ReleaseTimeIsSet;
}
void _mc_game_version_manifest_get_200_response_versions_inner::unsetReleaseTime()
{
    m_ReleaseTimeIsSet = false;
}


} // namespace org::openapitools::server::model

