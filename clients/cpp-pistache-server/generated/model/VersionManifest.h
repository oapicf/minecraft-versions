/**
* 
* SDK for Minecraft versions info
*
* The version of the OpenAPI document: 1.1.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * VersionManifest.h
 *
 * 
 */

#ifndef VersionManifest_H_
#define VersionManifest_H_


#include "Version.h"
#include "VersionManifest_latest.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  VersionManifest
{
public:
    VersionManifest();
    virtual ~VersionManifest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const VersionManifest& rhs) const;
    bool operator!=(const VersionManifest& rhs) const;

    /////////////////////////////////////////////
    /// VersionManifest members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::VersionManifest_latest getLatest() const;
    void setLatest(org::openapitools::server::model::VersionManifest_latest const& value);
    bool latestIsSet() const;
    void unsetLatest();
    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::Version> getVersions() const;
    void setVersions(std::vector<org::openapitools::server::model::Version> const& value);
    bool versionsIsSet() const;
    void unsetVersions();

    friend  void to_json(nlohmann::json& j, const VersionManifest& o);
    friend  void from_json(const nlohmann::json& j, VersionManifest& o);
protected:
    org::openapitools::server::model::VersionManifest_latest m_Latest;
    bool m_LatestIsSet;
    std::vector<org::openapitools::server::model::Version> m_Versions;
    bool m_VersionsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* VersionManifest_H_ */
