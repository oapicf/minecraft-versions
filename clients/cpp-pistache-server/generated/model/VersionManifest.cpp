/**
* 
* SDK for Minecraft versions info
*
* The version of the OpenAPI document: 1.1.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "VersionManifest.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

VersionManifest::VersionManifest()
{
    m_LatestIsSet = false;
    m_VersionsIsSet = false;
    
}

void VersionManifest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool VersionManifest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool VersionManifest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "VersionManifest" : pathPrefix;

             
    if (versionsIsSet())
    {
        const std::vector<org::openapitools::server::model::Version>& value = m_Versions;
        const std::string currentValuePath = _pathPrefix + ".versions";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::Version& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".versions") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool VersionManifest::operator==(const VersionManifest& rhs) const
{
    return
    
    
    
    ((!latestIsSet() && !rhs.latestIsSet()) || (latestIsSet() && rhs.latestIsSet() && getLatest() == rhs.getLatest())) &&
    
    
    ((!versionsIsSet() && !rhs.versionsIsSet()) || (versionsIsSet() && rhs.versionsIsSet() && getVersions() == rhs.getVersions()))
    
    ;
}

bool VersionManifest::operator!=(const VersionManifest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const VersionManifest& o)
{
    j = nlohmann::json::object();
    if(o.latestIsSet())
        j["latest"] = o.m_Latest;
    if(o.versionsIsSet() || !o.m_Versions.empty())
        j["versions"] = o.m_Versions;
    
}

void from_json(const nlohmann::json& j, VersionManifest& o)
{
    if(j.find("latest") != j.end())
    {
        j.at("latest").get_to(o.m_Latest);
        o.m_LatestIsSet = true;
    } 
    if(j.find("versions") != j.end())
    {
        j.at("versions").get_to(o.m_Versions);
        o.m_VersionsIsSet = true;
    } 
    
}

org::openapitools::server::model::VersionManifest_latest VersionManifest::getLatest() const
{
    return m_Latest;
}
void VersionManifest::setLatest(org::openapitools::server::model::VersionManifest_latest const& value)
{
    m_Latest = value;
    m_LatestIsSet = true;
}
bool VersionManifest::latestIsSet() const
{
    return m_LatestIsSet;
}
void VersionManifest::unsetLatest()
{
    m_LatestIsSet = false;
}
std::vector<org::openapitools::server::model::Version> VersionManifest::getVersions() const
{
    return m_Versions;
}
void VersionManifest::setVersions(std::vector<org::openapitools::server::model::Version> const& value)
{
    m_Versions = value;
    m_VersionsIsSet = true;
}
bool VersionManifest::versionsIsSet() const
{
    return m_VersionsIsSet;
}
void VersionManifest::unsetVersions()
{
    m_VersionsIsSet = false;
}


} // namespace org::openapitools::server::model

